
v1.5_stm32_i2c_lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035e4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080037b4  080037b4  000137b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800381c  0800381c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800381c  0800381c  0001381c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003824  08003824  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003824  08003824  00013824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003828  08003828  00013828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800382c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000074  080038a0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  080038a0  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b922  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019c1  00000000  00000000  0002b9c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  0002d388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002dd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000218c8  00000000  00000000  0002e6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d4f0  00000000  00000000  0004ffb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000caec8  00000000  00000000  0005d4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00128368  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cf8  00000000  00000000  001283b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800379c 	.word	0x0800379c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800379c 	.word	0x0800379c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fbdf 	bl	8000d7c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f94b 	bl	8000858 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 fa13 	bl	80009ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c6:	f000 f9e7 	bl	8000998 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005ca:	f000 f9b7 	bl	800093c <MX_I2C1_Init>
  lcd_init();
 80005ce:	f000 f8b8 	bl	8000742 <lcd_init>
  lcd_backlight(1); // Turn on backlight
 80005d2:	2001      	movs	r0, #1
 80005d4:	f000 f928 	bl	8000828 <lcd_backlight>

  char *text = "EmbeddedThere";
 80005d8:	4b17      	ldr	r3, [pc, #92]	; (8000638 <main+0x84>)
 80005da:	613b      	str	r3, [r7, #16]
  char int_to_str[10];
  int count=0;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]

  while (1)
  {
	  sprintf(int_to_str, "%d", count);
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	697a      	ldr	r2, [r7, #20]
 80005e4:	4915      	ldr	r1, [pc, #84]	; (800063c <main+0x88>)
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 fc6a 	bl	8002ec0 <siprintf>
	  lcd_clear();
 80005ec:	f000 f912 	bl	8000814 <lcd_clear>
	  lcd_set_cursor(0, 0);
 80005f0:	2100      	movs	r1, #0
 80005f2:	2000      	movs	r0, #0
 80005f4:	f000 f8e9 	bl	80007ca <lcd_set_cursor>
	  lcd_write_string(text);
 80005f8:	6938      	ldr	r0, [r7, #16]
 80005fa:	f000 f8d1 	bl	80007a0 <lcd_write_string>
	  lcd_set_cursor(1, 0);
 80005fe:	2100      	movs	r1, #0
 8000600:	2001      	movs	r0, #1
 8000602:	f000 f8e2 	bl	80007ca <lcd_set_cursor>
	  lcd_write_string(int_to_str);
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	4618      	mov	r0, r3
 800060a:	f000 f8c9 	bl	80007a0 <lcd_write_string>
	  lcd_set_cursor(1, 5);
 800060e:	2105      	movs	r1, #5
 8000610:	2001      	movs	r0, #1
 8000612:	f000 f8da 	bl	80007ca <lcd_set_cursor>
	  lcd_write_string("Hasan");
 8000616:	480a      	ldr	r0, [pc, #40]	; (8000640 <main+0x8c>)
 8000618:	f000 f8c2 	bl	80007a0 <lcd_write_string>
	  count++;
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	3301      	adds	r3, #1
 8000620:	617b      	str	r3, [r7, #20]
	  memset(int_to_str, 0, sizeof(int_to_str));
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	220a      	movs	r2, #10
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f002 fc41 	bl	8002eb0 <memset>
	  HAL_Delay(1500);
 800062e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000632:	f000 fc15 	bl	8000e60 <HAL_Delay>
	  sprintf(int_to_str, "%d", count);
 8000636:	e7d3      	b.n	80005e0 <main+0x2c>
 8000638:	080037b4 	.word	0x080037b4
 800063c:	080037c4 	.word	0x080037c4
 8000640:	080037c8 	.word	0x080037c8

08000644 <lcd_write_nibble>:

  }
}

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af02      	add	r7, sp, #8
 800064a:	4603      	mov	r3, r0
 800064c:	460a      	mov	r2, r1
 800064e:	71fb      	strb	r3, [r7, #7]
 8000650:	4613      	mov	r3, r2
 8000652:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	011b      	lsls	r3, r3, #4
 8000658:	b2db      	uxtb	r3, r3
 800065a:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 800065c:	7bfa      	ldrb	r2, [r7, #15]
 800065e:	79bb      	ldrb	r3, [r7, #6]
 8000660:	4313      	orrs	r3, r2
 8000662:	b2db      	uxtb	r3, r3
 8000664:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT; // Include backlight state in data
 8000666:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <lcd_write_nibble+0x7c>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	00db      	lsls	r3, r3, #3
 800066c:	b25a      	sxtb	r2, r3
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	b25b      	sxtb	r3, r3
 8000672:	4313      	orrs	r3, r2
 8000674:	b25b      	sxtb	r3, r3
 8000676:	b2db      	uxtb	r3, r3
 8000678:	73fb      	strb	r3, [r7, #15]
  data |= 1 << EN_BIT;
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	f043 0304 	orr.w	r3, r3, #4
 8000680:	b2db      	uxtb	r3, r3
 8000682:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000684:	f107 020f 	add.w	r2, r7, #15
 8000688:	2364      	movs	r3, #100	; 0x64
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	2301      	movs	r3, #1
 800068e:	214e      	movs	r1, #78	; 0x4e
 8000690:	480c      	ldr	r0, [pc, #48]	; (80006c4 <lcd_write_nibble+0x80>)
 8000692:	f000 ffe1 	bl	8001658 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 8000696:	2001      	movs	r0, #1
 8000698:	f000 fbe2 	bl	8000e60 <HAL_Delay>
  data &= ~(1 << EN_BIT);
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	f023 0304 	bic.w	r3, r3, #4
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 80006a6:	f107 020f 	add.w	r2, r7, #15
 80006aa:	2364      	movs	r3, #100	; 0x64
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2301      	movs	r3, #1
 80006b0:	214e      	movs	r1, #78	; 0x4e
 80006b2:	4804      	ldr	r0, [pc, #16]	; (80006c4 <lcd_write_nibble+0x80>)
 80006b4:	f000 ffd0 	bl	8001658 <HAL_I2C_Master_Transmit>
}
 80006b8:	bf00      	nop
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000000 	.word	0x20000000
 80006c4:	20000090 	.word	0x20000090

080006c8 <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	091b      	lsrs	r3, r3, #4
 80006d6:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	f003 030f 	and.w	r3, r3, #15
 80006de:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 0);
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	2100      	movs	r1, #0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ffad 	bl	8000644 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 0);
 80006ea:	7bbb      	ldrb	r3, [r7, #14]
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ffa8 	bl	8000644 <lcd_write_nibble>
  if (cmd == 0x01 || cmd == 0x02) {
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d002      	beq.n	8000700 <lcd_send_cmd+0x38>
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	2b02      	cmp	r3, #2
 80006fe:	d102      	bne.n	8000706 <lcd_send_cmd+0x3e>
    HAL_Delay(2);
 8000700:	2002      	movs	r0, #2
 8000702:	f000 fbad 	bl	8000e60 <HAL_Delay>
  }
  // Include backlight state in command
 // cmd |= backlight_state << BL_BIT;
 // HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &cmd, 1, 100);
}
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 800070e:	b580      	push	{r7, lr}
 8000710:	b084      	sub	sp, #16
 8000712:	af00      	add	r7, sp, #0
 8000714:	4603      	mov	r3, r0
 8000716:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = data >> 4;
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	091b      	lsrs	r3, r3, #4
 800071c:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = data & 0x0F;
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	f003 030f 	and.w	r3, r3, #15
 8000724:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 1);
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	2101      	movs	r1, #1
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff8a 	bl	8000644 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 1);
 8000730:	7bbb      	ldrb	r3, [r7, #14]
 8000732:	2101      	movs	r1, #1
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ff85 	bl	8000644 <lcd_write_nibble>
  // Include backlight state in data
 // data |= backlight_state << BL_BIT;
 // HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
}
 800073a:	bf00      	nop
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <lcd_init>:

void lcd_init() {
 8000742:	b580      	push	{r7, lr}
 8000744:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 8000746:	2032      	movs	r0, #50	; 0x32
 8000748:	f000 fb8a 	bl	8000e60 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 800074c:	2100      	movs	r1, #0
 800074e:	2003      	movs	r0, #3
 8000750:	f7ff ff78 	bl	8000644 <lcd_write_nibble>
  HAL_Delay(5);
 8000754:	2005      	movs	r0, #5
 8000756:	f000 fb83 	bl	8000e60 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 800075a:	2100      	movs	r1, #0
 800075c:	2003      	movs	r0, #3
 800075e:	f7ff ff71 	bl	8000644 <lcd_write_nibble>
  HAL_Delay(1);
 8000762:	2001      	movs	r0, #1
 8000764:	f000 fb7c 	bl	8000e60 <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8000768:	2100      	movs	r1, #0
 800076a:	2003      	movs	r0, #3
 800076c:	f7ff ff6a 	bl	8000644 <lcd_write_nibble>
  HAL_Delay(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f000 fb75 	bl	8000e60 <HAL_Delay>
  lcd_write_nibble(0x02, 0);
 8000776:	2100      	movs	r1, #0
 8000778:	2002      	movs	r0, #2
 800077a:	f7ff ff63 	bl	8000644 <lcd_write_nibble>
  lcd_send_cmd(0x28);
 800077e:	2028      	movs	r0, #40	; 0x28
 8000780:	f7ff ffa2 	bl	80006c8 <lcd_send_cmd>
  lcd_send_cmd(0x0C);
 8000784:	200c      	movs	r0, #12
 8000786:	f7ff ff9f 	bl	80006c8 <lcd_send_cmd>
  lcd_send_cmd(0x06);
 800078a:	2006      	movs	r0, #6
 800078c:	f7ff ff9c 	bl	80006c8 <lcd_send_cmd>
  lcd_send_cmd(0x01);
 8000790:	2001      	movs	r0, #1
 8000792:	f7ff ff99 	bl	80006c8 <lcd_send_cmd>
  HAL_Delay(2);
 8000796:	2002      	movs	r0, #2
 8000798:	f000 fb62 	bl	8000e60 <HAL_Delay>
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <lcd_write_string>:

void lcd_write_string(char *str) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  while (*str) {
 80007a8:	e006      	b.n	80007b8 <lcd_write_string+0x18>
    lcd_send_data(*str++);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	1c5a      	adds	r2, r3, #1
 80007ae:	607a      	str	r2, [r7, #4]
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ffab 	bl	800070e <lcd_send_data>
  while (*str) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d1f4      	bne.n	80007aa <lcd_write_string+0xa>
  }
}
 80007c0:	bf00      	nop
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column) {
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b084      	sub	sp, #16
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	4603      	mov	r3, r0
 80007d2:	460a      	mov	r2, r1
 80007d4:	71fb      	strb	r3, [r7, #7]
 80007d6:	4613      	mov	r3, r2
 80007d8:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    switch (row) {
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d002      	beq.n	80007e6 <lcd_set_cursor+0x1c>
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d003      	beq.n	80007ec <lcd_set_cursor+0x22>
 80007e4:	e005      	b.n	80007f2 <lcd_set_cursor+0x28>
        case 0:
            address = 0x00;
 80007e6:	2300      	movs	r3, #0
 80007e8:	73fb      	strb	r3, [r7, #15]
            break;
 80007ea:	e004      	b.n	80007f6 <lcd_set_cursor+0x2c>
        case 1:
            address = 0x40;
 80007ec:	2340      	movs	r3, #64	; 0x40
 80007ee:	73fb      	strb	r3, [r7, #15]
            break;
 80007f0:	e001      	b.n	80007f6 <lcd_set_cursor+0x2c>
        default:
            address = 0x00;
 80007f2:	2300      	movs	r3, #0
 80007f4:	73fb      	strb	r3, [r7, #15]
    }
    address += column;
 80007f6:	7bfa      	ldrb	r2, [r7, #15]
 80007f8:	79bb      	ldrb	r3, [r7, #6]
 80007fa:	4413      	add	r3, r2
 80007fc:	73fb      	strb	r3, [r7, #15]
    lcd_send_cmd(0x80 | address);
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000804:	b2db      	uxtb	r3, r3
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ff5e 	bl	80006c8 <lcd_send_cmd>
}
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <lcd_clear>:

void lcd_clear(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000818:	2001      	movs	r0, #1
 800081a:	f7ff ff55 	bl	80006c8 <lcd_send_cmd>
    HAL_Delay(2);
 800081e:	2002      	movs	r0, #2
 8000820:	f000 fb1e 	bl	8000e60 <HAL_Delay>
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}

08000828 <lcd_backlight>:

void lcd_backlight(uint8_t state) {
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
  if (state) {
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d003      	beq.n	8000840 <lcd_backlight+0x18>
    backlight_state = 1;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <lcd_backlight+0x2c>)
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
  } else {
    backlight_state = 0;
  }
}
 800083e:	e002      	b.n	8000846 <lcd_backlight+0x1e>
    backlight_state = 0;
 8000840:	4b04      	ldr	r3, [pc, #16]	; (8000854 <lcd_backlight+0x2c>)
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	20000000 	.word	0x20000000

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b094      	sub	sp, #80	; 0x50
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	2234      	movs	r2, #52	; 0x34
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f002 fb22 	bl	8002eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	4b2c      	ldr	r3, [pc, #176]	; (8000934 <SystemClock_Config+0xdc>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	4a2b      	ldr	r2, [pc, #172]	; (8000934 <SystemClock_Config+0xdc>)
 8000886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088a:	6413      	str	r3, [r2, #64]	; 0x40
 800088c:	4b29      	ldr	r3, [pc, #164]	; (8000934 <SystemClock_Config+0xdc>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000898:	2300      	movs	r3, #0
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	4b26      	ldr	r3, [pc, #152]	; (8000938 <SystemClock_Config+0xe0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a25      	ldr	r2, [pc, #148]	; (8000938 <SystemClock_Config+0xe0>)
 80008a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4b23      	ldr	r3, [pc, #140]	; (8000938 <SystemClock_Config+0xe0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008be:	2302      	movs	r3, #2
 80008c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008c8:	2304      	movs	r3, #4
 80008ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80008cc:	23b4      	movs	r3, #180	; 0xb4
 80008ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008d4:	2302      	movs	r3, #2
 80008d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008d8:	2302      	movs	r3, #2
 80008da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4618      	mov	r0, r3
 80008e2:	f001 fd5b 	bl	800239c <HAL_RCC_OscConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008ec:	f000 f8ec 	bl	8000ac8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008f0:	f001 f9ba 	bl	8001c68 <HAL_PWREx_EnableOverDrive>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008fa:	f000 f8e5 	bl	8000ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fe:	230f      	movs	r3, #15
 8000900:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000902:	2302      	movs	r3, #2
 8000904:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800090a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800090e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000914:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	2105      	movs	r1, #5
 800091c:	4618      	mov	r0, r3
 800091e:	f001 f9f3 	bl	8001d08 <HAL_RCC_ClockConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000928:	f000 f8ce 	bl	8000ac8 <Error_Handler>
  }
}
 800092c:	bf00      	nop
 800092e:	3750      	adds	r7, #80	; 0x50
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40023800 	.word	0x40023800
 8000938:	40007000 	.word	0x40007000

0800093c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <MX_I2C1_Init+0x50>)
 8000942:	4a13      	ldr	r2, [pc, #76]	; (8000990 <MX_I2C1_Init+0x54>)
 8000944:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_I2C1_Init+0x50>)
 8000948:	4a12      	ldr	r2, [pc, #72]	; (8000994 <MX_I2C1_Init+0x58>)
 800094a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_I2C1_Init+0x50>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_I2C1_Init+0x50>)
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_I2C1_Init+0x50>)
 800095a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800095e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000960:	4b0a      	ldr	r3, [pc, #40]	; (800098c <MX_I2C1_Init+0x50>)
 8000962:	2200      	movs	r2, #0
 8000964:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_I2C1_Init+0x50>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800096c:	4b07      	ldr	r3, [pc, #28]	; (800098c <MX_I2C1_Init+0x50>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_I2C1_Init+0x50>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000978:	4804      	ldr	r0, [pc, #16]	; (800098c <MX_I2C1_Init+0x50>)
 800097a:	f000 fd29 	bl	80013d0 <HAL_I2C_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000984:	f000 f8a0 	bl	8000ac8 <Error_Handler>
  }
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000090 	.word	0x20000090
 8000990:	40005400 	.word	0x40005400
 8000994:	000186a0 	.word	0x000186a0

08000998 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <MX_USART2_UART_Init+0x50>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_USART2_UART_Init+0x4c>)
 80009d0:	f001 ff82 	bl	80028d8 <HAL_UART_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009da:	f000 f875 	bl	8000ac8 <Error_Handler>
  }
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200000e4 	.word	0x200000e4
 80009e8:	40004400 	.word	0x40004400

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	4b2d      	ldr	r3, [pc, #180]	; (8000abc <MX_GPIO_Init+0xd0>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a2c      	ldr	r2, [pc, #176]	; (8000abc <MX_GPIO_Init+0xd0>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b2a      	ldr	r3, [pc, #168]	; (8000abc <MX_GPIO_Init+0xd0>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	4b26      	ldr	r3, [pc, #152]	; (8000abc <MX_GPIO_Init+0xd0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a25      	ldr	r2, [pc, #148]	; (8000abc <MX_GPIO_Init+0xd0>)
 8000a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b23      	ldr	r3, [pc, #140]	; (8000abc <MX_GPIO_Init+0xd0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <MX_GPIO_Init+0xd0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a1e      	ldr	r2, [pc, #120]	; (8000abc <MX_GPIO_Init+0xd0>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <MX_GPIO_Init+0xd0>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <MX_GPIO_Init+0xd0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a17      	ldr	r2, [pc, #92]	; (8000abc <MX_GPIO_Init+0xd0>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <MX_GPIO_Init+0xd0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2120      	movs	r1, #32
 8000a76:	4812      	ldr	r0, [pc, #72]	; (8000ac0 <MX_GPIO_Init+0xd4>)
 8000a78:	f000 fc90 	bl	800139c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a82:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <MX_GPIO_Init+0xd8>)
 8000a94:	f000 faee 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a98:	2320      	movs	r3, #32
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <MX_GPIO_Init+0xd4>)
 8000ab0:	f000 fae0 	bl	8001074 <HAL_GPIO_Init>

}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	; 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020000 	.word	0x40020000
 8000ac4:	40020800 	.word	0x40020800

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <Error_Handler+0x8>
	...

08000ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_MspInit+0x4c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b12:	2007      	movs	r0, #7
 8000b14:	f000 fa7a 	bl	800100c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40023800 	.word	0x40023800

08000b24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a19      	ldr	r2, [pc, #100]	; (8000ba8 <HAL_I2C_MspInit+0x84>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d12c      	bne.n	8000ba0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a17      	ldr	r2, [pc, #92]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b68:	2312      	movs	r3, #18
 8000b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b74:	2304      	movs	r3, #4
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <HAL_I2C_MspInit+0x8c>)
 8000b80:	f000 fa78 	bl	8001074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	4a07      	ldr	r2, [pc, #28]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b92:	6413      	str	r3, [r2, #64]	; 0x40
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <HAL_I2C_MspInit+0x88>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ba0:	bf00      	nop
 8000ba2:	3728      	adds	r7, #40	; 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40005400 	.word	0x40005400
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020400 	.word	0x40020400

08000bb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	; 0x28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a19      	ldr	r2, [pc, #100]	; (8000c38 <HAL_UART_MspInit+0x84>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d12b      	bne.n	8000c2e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <HAL_UART_MspInit+0x88>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	4a17      	ldr	r2, [pc, #92]	; (8000c3c <HAL_UART_MspInit+0x88>)
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be4:	6413      	str	r3, [r2, #64]	; 0x40
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <HAL_UART_MspInit+0x88>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <HAL_UART_MspInit+0x88>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a10      	ldr	r2, [pc, #64]	; (8000c3c <HAL_UART_MspInit+0x88>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <HAL_UART_MspInit+0x88>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c0e:	230c      	movs	r3, #12
 8000c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c1e:	2307      	movs	r3, #7
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <HAL_UART_MspInit+0x8c>)
 8000c2a:	f000 fa23 	bl	8001074 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	; 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40004400 	.word	0x40004400
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020000 	.word	0x40020000

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <NMI_Handler+0x4>

08000c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <MemManage_Handler+0x4>

08000c56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c90:	f000 f8c6 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca0:	4a14      	ldr	r2, [pc, #80]	; (8000cf4 <_sbrk+0x5c>)
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <_sbrk+0x60>)
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d102      	bne.n	8000cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <_sbrk+0x64>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <_sbrk+0x68>)
 8000cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d207      	bcs.n	8000cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc8:	f002 f8c8 	bl	8002e5c <__errno>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	220c      	movs	r2, #12
 8000cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd6:	e009      	b.n	8000cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cde:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <_sbrk+0x64>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <_sbrk+0x64>)
 8000ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cea:	68fb      	ldr	r3, [r7, #12]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20020000 	.word	0x20020000
 8000cf8:	00000400 	.word	0x00000400
 8000cfc:	20000128 	.word	0x20000128
 8000d00:	20000140 	.word	0x20000140

08000d04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <SystemInit+0x20>)
 8000d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0e:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <SystemInit+0x20>)
 8000d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d2e:	490e      	ldr	r1, [pc, #56]	; (8000d68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d30:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d34:	e002      	b.n	8000d3c <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3a:	3304      	adds	r3, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d40:	d3f9      	bcc.n	8000d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d42:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d44:	4c0b      	ldr	r4, [pc, #44]	; (8000d74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d48:	e001      	b.n	8000d4e <LoopFillZerobss>

08000d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d4c:	3204      	adds	r2, #4

08000d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d50:	d3fb      	bcc.n	8000d4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d52:	f7ff ffd7 	bl	8000d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d56:	f002 f887 	bl	8002e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d5a:	f7ff fc2b 	bl	80005b4 <main>
  bx  lr    
 8000d5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d68:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d6c:	0800382c 	.word	0x0800382c
  ldr r2, =_sbss
 8000d70:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d74:	20000140 	.word	0x20000140

08000d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC_IRQHandler>
	...

08000d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <HAL_Init+0x40>)
 8000d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <HAL_Init+0x40>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <HAL_Init+0x40>)
 8000d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <HAL_Init+0x40>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <HAL_Init+0x40>)
 8000d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da4:	2003      	movs	r0, #3
 8000da6:	f000 f931 	bl	800100c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000daa:	2000      	movs	r0, #0
 8000dac:	f000 f808 	bl	8000dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db0:	f7ff fe90 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40023c00 	.word	0x40023c00

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_InitTick+0x54>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_InitTick+0x58>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f93b 	bl	800105a <HAL_SYSTICK_Config>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00e      	b.n	8000e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d80a      	bhi.n	8000e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df4:	2200      	movs	r2, #0
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f000 f911 	bl	8001022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e00:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <HAL_InitTick+0x5c>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e000      	b.n	8000e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000004 	.word	0x20000004
 8000e18:	2000000c 	.word	0x2000000c
 8000e1c:	20000008 	.word	0x20000008

08000e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	2000000c 	.word	0x2000000c
 8000e44:	2000012c 	.word	0x2000012c

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	2000012c 	.word	0x2000012c

08000e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff ffee 	bl	8000e48 <HAL_GetTick>
 8000e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e78:	d005      	beq.n	8000e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_Delay+0x44>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e86:	bf00      	nop
 8000e88:	f7ff ffde 	bl	8000e48 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8f7      	bhi.n	8000e88 <HAL_Delay+0x28>
  {
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	2000000c 	.word	0x2000000c

08000ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eda:	4a04      	ldr	r2, [pc, #16]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	60d3      	str	r3, [r2, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db0a      	blt.n	8000f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	490c      	ldr	r1, [pc, #48]	; (8000f58 <__NVIC_SetPriority+0x4c>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	0112      	lsls	r2, r2, #4
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	440b      	add	r3, r1
 8000f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f34:	e00a      	b.n	8000f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4908      	ldr	r1, [pc, #32]	; (8000f5c <__NVIC_SetPriority+0x50>)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	3b04      	subs	r3, #4
 8000f44:	0112      	lsls	r2, r2, #4
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	440b      	add	r3, r1
 8000f4a:	761a      	strb	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000e100 	.word	0xe000e100
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	; 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f1c3 0307 	rsb	r3, r3, #7
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	bf28      	it	cs
 8000f7e:	2304      	movcs	r3, #4
 8000f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3304      	adds	r3, #4
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	d902      	bls.n	8000f90 <NVIC_EncodePriority+0x30>
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3b03      	subs	r3, #3
 8000f8e:	e000      	b.n	8000f92 <NVIC_EncodePriority+0x32>
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	43d9      	mvns	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	4313      	orrs	r3, r2
         );
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3724      	adds	r7, #36	; 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd8:	d301      	bcc.n	8000fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00f      	b.n	8000ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fde:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <SysTick_Config+0x40>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe6:	210f      	movs	r1, #15
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f7ff ff8e 	bl	8000f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <SysTick_Config+0x40>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff6:	4b04      	ldr	r3, [pc, #16]	; (8001008 <SysTick_Config+0x40>)
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	e000e010 	.word	0xe000e010

0800100c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ff47 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001034:	f7ff ff5c 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 8001038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	68b9      	ldr	r1, [r7, #8]
 800103e:	6978      	ldr	r0, [r7, #20]
 8001040:	f7ff ff8e 	bl	8000f60 <NVIC_EncodePriority>
 8001044:	4602      	mov	r2, r0
 8001046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff5d 	bl	8000f0c <__NVIC_SetPriority>
}
 8001052:	bf00      	nop
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffb0 	bl	8000fc8 <SysTick_Config>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
 800108e:	e165      	b.n	800135c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001090:	2201      	movs	r2, #1
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	f040 8154 	bne.w	8001356 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d005      	beq.n	80010c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d130      	bne.n	8001128 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	68da      	ldr	r2, [r3, #12]
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010fc:	2201      	movs	r2, #1
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	091b      	lsrs	r3, r3, #4
 8001112:	f003 0201 	and.w	r2, r3, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	2b03      	cmp	r3, #3
 8001132:	d017      	beq.n	8001164 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	2203      	movs	r2, #3
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d123      	bne.n	80011b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	08da      	lsrs	r2, r3, #3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3208      	adds	r2, #8
 8001178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	220f      	movs	r2, #15
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	691a      	ldr	r2, [r3, #16]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	08da      	lsrs	r2, r3, #3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3208      	adds	r2, #8
 80011b2:	69b9      	ldr	r1, [r7, #24]
 80011b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0203 	and.w	r2, r3, #3
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f000 80ae 	beq.w	8001356 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b5d      	ldr	r3, [pc, #372]	; (8001374 <HAL_GPIO_Init+0x300>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	4a5c      	ldr	r2, [pc, #368]	; (8001374 <HAL_GPIO_Init+0x300>)
 8001204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001208:	6453      	str	r3, [r2, #68]	; 0x44
 800120a:	4b5a      	ldr	r3, [pc, #360]	; (8001374 <HAL_GPIO_Init+0x300>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001216:	4a58      	ldr	r2, [pc, #352]	; (8001378 <HAL_GPIO_Init+0x304>)
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	3302      	adds	r3, #2
 800121e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	220f      	movs	r2, #15
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4f      	ldr	r2, [pc, #316]	; (800137c <HAL_GPIO_Init+0x308>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d025      	beq.n	800128e <HAL_GPIO_Init+0x21a>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4e      	ldr	r2, [pc, #312]	; (8001380 <HAL_GPIO_Init+0x30c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d01f      	beq.n	800128a <HAL_GPIO_Init+0x216>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4d      	ldr	r2, [pc, #308]	; (8001384 <HAL_GPIO_Init+0x310>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d019      	beq.n	8001286 <HAL_GPIO_Init+0x212>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4c      	ldr	r2, [pc, #304]	; (8001388 <HAL_GPIO_Init+0x314>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d013      	beq.n	8001282 <HAL_GPIO_Init+0x20e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4b      	ldr	r2, [pc, #300]	; (800138c <HAL_GPIO_Init+0x318>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d00d      	beq.n	800127e <HAL_GPIO_Init+0x20a>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4a      	ldr	r2, [pc, #296]	; (8001390 <HAL_GPIO_Init+0x31c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d007      	beq.n	800127a <HAL_GPIO_Init+0x206>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a49      	ldr	r2, [pc, #292]	; (8001394 <HAL_GPIO_Init+0x320>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d101      	bne.n	8001276 <HAL_GPIO_Init+0x202>
 8001272:	2306      	movs	r3, #6
 8001274:	e00c      	b.n	8001290 <HAL_GPIO_Init+0x21c>
 8001276:	2307      	movs	r3, #7
 8001278:	e00a      	b.n	8001290 <HAL_GPIO_Init+0x21c>
 800127a:	2305      	movs	r3, #5
 800127c:	e008      	b.n	8001290 <HAL_GPIO_Init+0x21c>
 800127e:	2304      	movs	r3, #4
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x21c>
 8001282:	2303      	movs	r3, #3
 8001284:	e004      	b.n	8001290 <HAL_GPIO_Init+0x21c>
 8001286:	2302      	movs	r3, #2
 8001288:	e002      	b.n	8001290 <HAL_GPIO_Init+0x21c>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <HAL_GPIO_Init+0x21c>
 800128e:	2300      	movs	r3, #0
 8001290:	69fa      	ldr	r2, [r7, #28]
 8001292:	f002 0203 	and.w	r2, r2, #3
 8001296:	0092      	lsls	r2, r2, #2
 8001298:	4093      	lsls	r3, r2
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a0:	4935      	ldr	r1, [pc, #212]	; (8001378 <HAL_GPIO_Init+0x304>)
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	3302      	adds	r3, #2
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ae:	4b3a      	ldr	r3, [pc, #232]	; (8001398 <HAL_GPIO_Init+0x324>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012d2:	4a31      	ldr	r2, [pc, #196]	; (8001398 <HAL_GPIO_Init+0x324>)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d8:	4b2f      	ldr	r3, [pc, #188]	; (8001398 <HAL_GPIO_Init+0x324>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012fc:	4a26      	ldr	r2, [pc, #152]	; (8001398 <HAL_GPIO_Init+0x324>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001302:	4b25      	ldr	r3, [pc, #148]	; (8001398 <HAL_GPIO_Init+0x324>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001326:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <HAL_GPIO_Init+0x324>)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <HAL_GPIO_Init+0x324>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001350:	4a11      	ldr	r2, [pc, #68]	; (8001398 <HAL_GPIO_Init+0x324>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3301      	adds	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	2b0f      	cmp	r3, #15
 8001360:	f67f ae96 	bls.w	8001090 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	40013800 	.word	0x40013800
 800137c:	40020000 	.word	0x40020000
 8001380:	40020400 	.word	0x40020400
 8001384:	40020800 	.word	0x40020800
 8001388:	40020c00 	.word	0x40020c00
 800138c:	40021000 	.word	0x40021000
 8001390:	40021400 	.word	0x40021400
 8001394:	40021800 	.word	0x40021800
 8001398:	40013c00 	.word	0x40013c00

0800139c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	807b      	strh	r3, [r7, #2]
 80013a8:	4613      	mov	r3, r2
 80013aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013ac:	787b      	ldrb	r3, [r7, #1]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013b2:	887a      	ldrh	r2, [r7, #2]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013b8:	e003      	b.n	80013c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ba:	887b      	ldrh	r3, [r7, #2]
 80013bc:	041a      	lsls	r2, r3, #16
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	619a      	str	r2, [r3, #24]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e12b      	b.n	800163a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d106      	bne.n	80013fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff fb94 	bl	8000b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2224      	movs	r2, #36	; 0x24
 8001400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0201 	bic.w	r2, r2, #1
 8001412:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001422:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001432:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001434:	f000 fd5a 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8001438:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	4a81      	ldr	r2, [pc, #516]	; (8001644 <HAL_I2C_Init+0x274>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d807      	bhi.n	8001454 <HAL_I2C_Init+0x84>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4a80      	ldr	r2, [pc, #512]	; (8001648 <HAL_I2C_Init+0x278>)
 8001448:	4293      	cmp	r3, r2
 800144a:	bf94      	ite	ls
 800144c:	2301      	movls	r3, #1
 800144e:	2300      	movhi	r3, #0
 8001450:	b2db      	uxtb	r3, r3
 8001452:	e006      	b.n	8001462 <HAL_I2C_Init+0x92>
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4a7d      	ldr	r2, [pc, #500]	; (800164c <HAL_I2C_Init+0x27c>)
 8001458:	4293      	cmp	r3, r2
 800145a:	bf94      	ite	ls
 800145c:	2301      	movls	r3, #1
 800145e:	2300      	movhi	r3, #0
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e0e7      	b.n	800163a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4a78      	ldr	r2, [pc, #480]	; (8001650 <HAL_I2C_Init+0x280>)
 800146e:	fba2 2303 	umull	r2, r3, r2, r3
 8001472:	0c9b      	lsrs	r3, r3, #18
 8001474:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	430a      	orrs	r2, r1
 8001488:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	4a6a      	ldr	r2, [pc, #424]	; (8001644 <HAL_I2C_Init+0x274>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d802      	bhi.n	80014a4 <HAL_I2C_Init+0xd4>
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	3301      	adds	r3, #1
 80014a2:	e009      	b.n	80014b8 <HAL_I2C_Init+0xe8>
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014aa:	fb02 f303 	mul.w	r3, r2, r3
 80014ae:	4a69      	ldr	r2, [pc, #420]	; (8001654 <HAL_I2C_Init+0x284>)
 80014b0:	fba2 2303 	umull	r2, r3, r2, r3
 80014b4:	099b      	lsrs	r3, r3, #6
 80014b6:	3301      	adds	r3, #1
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	430b      	orrs	r3, r1
 80014be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	495c      	ldr	r1, [pc, #368]	; (8001644 <HAL_I2C_Init+0x274>)
 80014d4:	428b      	cmp	r3, r1
 80014d6:	d819      	bhi.n	800150c <HAL_I2C_Init+0x13c>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80014e6:	1c59      	adds	r1, r3, #1
 80014e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80014ec:	400b      	ands	r3, r1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00a      	beq.n	8001508 <HAL_I2C_Init+0x138>
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	1e59      	subs	r1, r3, #1
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001500:	3301      	adds	r3, #1
 8001502:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001506:	e051      	b.n	80015ac <HAL_I2C_Init+0x1dc>
 8001508:	2304      	movs	r3, #4
 800150a:	e04f      	b.n	80015ac <HAL_I2C_Init+0x1dc>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d111      	bne.n	8001538 <HAL_I2C_Init+0x168>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	1e58      	subs	r0, r3, #1
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6859      	ldr	r1, [r3, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	440b      	add	r3, r1
 8001522:	fbb0 f3f3 	udiv	r3, r0, r3
 8001526:	3301      	adds	r3, #1
 8001528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800152c:	2b00      	cmp	r3, #0
 800152e:	bf0c      	ite	eq
 8001530:	2301      	moveq	r3, #1
 8001532:	2300      	movne	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	e012      	b.n	800155e <HAL_I2C_Init+0x18e>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	1e58      	subs	r0, r3, #1
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6859      	ldr	r1, [r3, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	440b      	add	r3, r1
 8001546:	0099      	lsls	r1, r3, #2
 8001548:	440b      	add	r3, r1
 800154a:	fbb0 f3f3 	udiv	r3, r0, r3
 800154e:	3301      	adds	r3, #1
 8001550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001554:	2b00      	cmp	r3, #0
 8001556:	bf0c      	ite	eq
 8001558:	2301      	moveq	r3, #1
 800155a:	2300      	movne	r3, #0
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_I2C_Init+0x196>
 8001562:	2301      	movs	r3, #1
 8001564:	e022      	b.n	80015ac <HAL_I2C_Init+0x1dc>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10e      	bne.n	800158c <HAL_I2C_Init+0x1bc>
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	1e58      	subs	r0, r3, #1
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6859      	ldr	r1, [r3, #4]
 8001576:	460b      	mov	r3, r1
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	440b      	add	r3, r1
 800157c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001580:	3301      	adds	r3, #1
 8001582:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800158a:	e00f      	b.n	80015ac <HAL_I2C_Init+0x1dc>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	1e58      	subs	r0, r3, #1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6859      	ldr	r1, [r3, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	0099      	lsls	r1, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	fbb0 f3f3 	udiv	r3, r0, r3
 80015a2:	3301      	adds	r3, #1
 80015a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	6809      	ldr	r1, [r1, #0]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69da      	ldr	r2, [r3, #28]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6911      	ldr	r1, [r2, #16]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68d2      	ldr	r2, [r2, #12]
 80015e6:	4311      	orrs	r1, r2
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	430b      	orrs	r3, r1
 80015ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	695a      	ldr	r2, [r3, #20]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0201 	orr.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2220      	movs	r2, #32
 8001626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	000186a0 	.word	0x000186a0
 8001648:	001e847f 	.word	0x001e847f
 800164c:	003d08ff 	.word	0x003d08ff
 8001650:	431bde83 	.word	0x431bde83
 8001654:	10624dd3 	.word	0x10624dd3

08001658 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af02      	add	r7, sp, #8
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	607a      	str	r2, [r7, #4]
 8001662:	461a      	mov	r2, r3
 8001664:	460b      	mov	r3, r1
 8001666:	817b      	strh	r3, [r7, #10]
 8001668:	4613      	mov	r3, r2
 800166a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800166c:	f7ff fbec 	bl	8000e48 <HAL_GetTick>
 8001670:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b20      	cmp	r3, #32
 800167c:	f040 80e0 	bne.w	8001840 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	2319      	movs	r3, #25
 8001686:	2201      	movs	r2, #1
 8001688:	4970      	ldr	r1, [pc, #448]	; (800184c <HAL_I2C_Master_Transmit+0x1f4>)
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f000 f964 	bl	8001958 <I2C_WaitOnFlagUntilTimeout>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001696:	2302      	movs	r3, #2
 8001698:	e0d3      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_I2C_Master_Transmit+0x50>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e0cc      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1ea>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d007      	beq.n	80016ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f042 0201 	orr.w	r2, r2, #1
 80016cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2221      	movs	r2, #33	; 0x21
 80016e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2210      	movs	r2, #16
 80016ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2200      	movs	r2, #0
 80016f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	893a      	ldrh	r2, [r7, #8]
 80016fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001704:	b29a      	uxth	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4a50      	ldr	r2, [pc, #320]	; (8001850 <HAL_I2C_Master_Transmit+0x1f8>)
 800170e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001710:	8979      	ldrh	r1, [r7, #10]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	6a3a      	ldr	r2, [r7, #32]
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f000 f89c 	bl	8001854 <I2C_MasterRequestWrite>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e08d      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800173c:	e066      	b.n	800180c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	6a39      	ldr	r1, [r7, #32]
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f000 f9de 	bl	8001b04 <I2C_WaitOnTXEFlagUntilTimeout>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00d      	beq.n	800176a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	2b04      	cmp	r3, #4
 8001754:	d107      	bne.n	8001766 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001764:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e06b      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176e:	781a      	ldrb	r2, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001784:	b29b      	uxth	r3, r3
 8001786:	3b01      	subs	r3, #1
 8001788:	b29a      	uxth	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001792:	3b01      	subs	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d11b      	bne.n	80017e0 <HAL_I2C_Master_Transmit+0x188>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d017      	beq.n	80017e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	781a      	ldrb	r2, [r3, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	3b01      	subs	r3, #1
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017d8:	3b01      	subs	r3, #1
 80017da:	b29a      	uxth	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	6a39      	ldr	r1, [r7, #32]
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f000 f9ce 	bl	8001b86 <I2C_WaitOnBTFFlagUntilTimeout>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00d      	beq.n	800180c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	2b04      	cmp	r3, #4
 80017f6:	d107      	bne.n	8001808 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001806:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e01a      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001810:	2b00      	cmp	r3, #0
 8001812:	d194      	bne.n	800173e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2220      	movs	r2, #32
 8001828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	e000      	b.n	8001842 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001840:	2302      	movs	r3, #2
  }
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	00100002 	.word	0x00100002
 8001850:	ffff0000 	.word	0xffff0000

08001854 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af02      	add	r7, sp, #8
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	460b      	mov	r3, r1
 8001862:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	2b08      	cmp	r3, #8
 800186e:	d006      	beq.n	800187e <I2C_MasterRequestWrite+0x2a>
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d003      	beq.n	800187e <I2C_MasterRequestWrite+0x2a>
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800187c:	d108      	bne.n	8001890 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	e00b      	b.n	80018a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	2b12      	cmp	r3, #18
 8001896:	d107      	bne.n	80018a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018b4:	68f8      	ldr	r0, [r7, #12]
 80018b6:	f000 f84f 	bl	8001958 <I2C_WaitOnFlagUntilTimeout>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00d      	beq.n	80018dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018ce:	d103      	bne.n	80018d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e035      	b.n	8001948 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018e4:	d108      	bne.n	80018f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018e6:	897b      	ldrh	r3, [r7, #10]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	461a      	mov	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80018f4:	611a      	str	r2, [r3, #16]
 80018f6:	e01b      	b.n	8001930 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80018f8:	897b      	ldrh	r3, [r7, #10]
 80018fa:	11db      	asrs	r3, r3, #7
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	f003 0306 	and.w	r3, r3, #6
 8001902:	b2db      	uxtb	r3, r3
 8001904:	f063 030f 	orn	r3, r3, #15
 8001908:	b2da      	uxtb	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	490e      	ldr	r1, [pc, #56]	; (8001950 <I2C_MasterRequestWrite+0xfc>)
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f000 f875 	bl	8001a06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e010      	b.n	8001948 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001926:	897b      	ldrh	r3, [r7, #10]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	4907      	ldr	r1, [pc, #28]	; (8001954 <I2C_MasterRequestWrite+0x100>)
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 f865 	bl	8001a06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	00010008 	.word	0x00010008
 8001954:	00010002 	.word	0x00010002

08001958 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	4613      	mov	r3, r2
 8001966:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001968:	e025      	b.n	80019b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001970:	d021      	beq.n	80019b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001972:	f7ff fa69 	bl	8000e48 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d302      	bcc.n	8001988 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d116      	bne.n	80019b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2220      	movs	r2, #32
 8001992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f043 0220 	orr.w	r2, r3, #32
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e023      	b.n	80019fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	0c1b      	lsrs	r3, r3, #16
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d10d      	bne.n	80019dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	43da      	mvns	r2, r3
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	4013      	ands	r3, r2
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	bf0c      	ite	eq
 80019d2:	2301      	moveq	r3, #1
 80019d4:	2300      	movne	r3, #0
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	e00c      	b.n	80019f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	43da      	mvns	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4013      	ands	r3, r2
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	bf0c      	ite	eq
 80019ee:	2301      	moveq	r3, #1
 80019f0:	2300      	movne	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d0b6      	beq.n	800196a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b084      	sub	sp, #16
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a14:	e051      	b.n	8001aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a24:	d123      	bne.n	8001a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a34:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a3e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2220      	movs	r2, #32
 8001a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f043 0204 	orr.w	r2, r3, #4
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e046      	b.n	8001afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a74:	d021      	beq.n	8001aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a76:	f7ff f9e7 	bl	8000e48 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d302      	bcc.n	8001a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d116      	bne.n	8001aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2220      	movs	r2, #32
 8001a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f043 0220 	orr.w	r2, r3, #32
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e020      	b.n	8001afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	0c1b      	lsrs	r3, r3, #16
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d10c      	bne.n	8001ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	43da      	mvns	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	bf14      	ite	ne
 8001ad6:	2301      	movne	r3, #1
 8001ad8:	2300      	moveq	r3, #0
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	e00b      	b.n	8001af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	43da      	mvns	r2, r3
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	bf14      	ite	ne
 8001af0:	2301      	movne	r3, #1
 8001af2:	2300      	moveq	r3, #0
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d18d      	bne.n	8001a16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b10:	e02d      	b.n	8001b6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f000 f878 	bl	8001c08 <I2C_IsAcknowledgeFailed>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e02d      	b.n	8001b7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b28:	d021      	beq.n	8001b6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b2a:	f7ff f98d 	bl	8000e48 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d302      	bcc.n	8001b40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d116      	bne.n	8001b6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2220      	movs	r2, #32
 8001b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	f043 0220 	orr.w	r2, r3, #32
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e007      	b.n	8001b7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b78:	2b80      	cmp	r3, #128	; 0x80
 8001b7a:	d1ca      	bne.n	8001b12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b084      	sub	sp, #16
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b92:	e02d      	b.n	8001bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f000 f837 	bl	8001c08 <I2C_IsAcknowledgeFailed>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e02d      	b.n	8001c00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001baa:	d021      	beq.n	8001bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bac:	f7ff f94c 	bl	8000e48 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d302      	bcc.n	8001bc2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d116      	bne.n	8001bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	f043 0220 	orr.w	r2, r3, #32
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e007      	b.n	8001c00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d1ca      	bne.n	8001b94 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c1e:	d11b      	bne.n	8001c58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2220      	movs	r2, #32
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	f043 0204 	orr.w	r2, r3, #4
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	4a1f      	ldr	r2, [pc, #124]	; (8001cf8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c80:	6413      	str	r3, [r2, #64]	; 0x40
 8001c82:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	603b      	str	r3, [r7, #0]
 8001c8c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <HAL_PWREx_EnableOverDrive+0x94>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c94:	f7ff f8d8 	bl	8000e48 <HAL_GetTick>
 8001c98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c9a:	e009      	b.n	8001cb0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c9c:	f7ff f8d4 	bl	8000e48 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001caa:	d901      	bls.n	8001cb0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e01f      	b.n	8001cf0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001cb0:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <HAL_PWREx_EnableOverDrive+0x98>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cbc:	d1ee      	bne.n	8001c9c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cc4:	f7ff f8c0 	bl	8000e48 <HAL_GetTick>
 8001cc8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cca:	e009      	b.n	8001ce0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ccc:	f7ff f8bc 	bl	8000e48 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cda:	d901      	bls.n	8001ce0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e007      	b.n	8001cf0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ce0:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001cec:	d1ee      	bne.n	8001ccc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	420e0040 	.word	0x420e0040
 8001d00:	40007000 	.word	0x40007000
 8001d04:	420e0044 	.word	0x420e0044

08001d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0cc      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b68      	ldr	r3, [pc, #416]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 030f 	and.w	r3, r3, #15
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d90c      	bls.n	8001d44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b65      	ldr	r3, [pc, #404]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b63      	ldr	r3, [pc, #396]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0b8      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d020      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d5c:	4b59      	ldr	r3, [pc, #356]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	4a58      	ldr	r2, [pc, #352]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d74:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	4a52      	ldr	r2, [pc, #328]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d80:	4b50      	ldr	r3, [pc, #320]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	494d      	ldr	r1, [pc, #308]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d044      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d107      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da6:	4b47      	ldr	r3, [pc, #284]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d119      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e07f      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d003      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc6:	4b3f      	ldr	r3, [pc, #252]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d109      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e06f      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd6:	4b3b      	ldr	r3, [pc, #236]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e067      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001de6:	4b37      	ldr	r3, [pc, #220]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f023 0203 	bic.w	r2, r3, #3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4934      	ldr	r1, [pc, #208]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df8:	f7ff f826 	bl	8000e48 <HAL_GetTick>
 8001dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e00:	f7ff f822 	bl	8000e48 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e04f      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e16:	4b2b      	ldr	r3, [pc, #172]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 020c 	and.w	r2, r3, #12
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d1eb      	bne.n	8001e00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e28:	4b25      	ldr	r3, [pc, #148]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 030f 	and.w	r3, r3, #15
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d20c      	bcs.n	8001e50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b22      	ldr	r3, [pc, #136]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3e:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e032      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e5c:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	4916      	ldr	r1, [pc, #88]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d009      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	490e      	ldr	r1, [pc, #56]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e8e:	f000 f855 	bl	8001f3c <HAL_RCC_GetSysClockFreq>
 8001e92:	4602      	mov	r2, r0
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	490a      	ldr	r1, [pc, #40]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea0:	5ccb      	ldrb	r3, [r1, r3]
 8001ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea6:	4a09      	ldr	r2, [pc, #36]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe ff86 	bl	8000dc0 <HAL_InitTick>

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023c00 	.word	0x40023c00
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	080037d0 	.word	0x080037d0
 8001ecc:	20000004 	.word	0x20000004
 8001ed0:	20000008 	.word	0x20000008

08001ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000004 	.word	0x20000004

08001eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ef0:	f7ff fff0 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	0a9b      	lsrs	r3, r3, #10
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	4903      	ldr	r1, [pc, #12]	; (8001f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f02:	5ccb      	ldrb	r3, [r1, r3]
 8001f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	080037e0 	.word	0x080037e0

08001f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f18:	f7ff ffdc 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	0b5b      	lsrs	r3, r3, #13
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	4903      	ldr	r1, [pc, #12]	; (8001f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f2a:	5ccb      	ldrb	r3, [r1, r3]
 8001f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40023800 	.word	0x40023800
 8001f38:	080037e0 	.word	0x080037e0

08001f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f40:	b0ae      	sub	sp, #184	; 0xb8
 8001f42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f62:	4bcb      	ldr	r3, [pc, #812]	; (8002290 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b0c      	cmp	r3, #12
 8001f6c:	f200 8206 	bhi.w	800237c <HAL_RCC_GetSysClockFreq+0x440>
 8001f70:	a201      	add	r2, pc, #4	; (adr r2, 8001f78 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f76:	bf00      	nop
 8001f78:	08001fad 	.word	0x08001fad
 8001f7c:	0800237d 	.word	0x0800237d
 8001f80:	0800237d 	.word	0x0800237d
 8001f84:	0800237d 	.word	0x0800237d
 8001f88:	08001fb5 	.word	0x08001fb5
 8001f8c:	0800237d 	.word	0x0800237d
 8001f90:	0800237d 	.word	0x0800237d
 8001f94:	0800237d 	.word	0x0800237d
 8001f98:	08001fbd 	.word	0x08001fbd
 8001f9c:	0800237d 	.word	0x0800237d
 8001fa0:	0800237d 	.word	0x0800237d
 8001fa4:	0800237d 	.word	0x0800237d
 8001fa8:	080021ad 	.word	0x080021ad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fac:	4bb9      	ldr	r3, [pc, #740]	; (8002294 <HAL_RCC_GetSysClockFreq+0x358>)
 8001fae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001fb2:	e1e7      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fb4:	4bb8      	ldr	r3, [pc, #736]	; (8002298 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001fb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001fba:	e1e3      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fbc:	4bb4      	ldr	r3, [pc, #720]	; (8002290 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fc8:	4bb1      	ldr	r3, [pc, #708]	; (8002290 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d071      	beq.n	80020b8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fd4:	4bae      	ldr	r3, [pc, #696]	; (8002290 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	099b      	lsrs	r3, r3, #6
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001fe0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001fe4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001ff6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001ffa:	4622      	mov	r2, r4
 8001ffc:	462b      	mov	r3, r5
 8001ffe:	f04f 0000 	mov.w	r0, #0
 8002002:	f04f 0100 	mov.w	r1, #0
 8002006:	0159      	lsls	r1, r3, #5
 8002008:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800200c:	0150      	lsls	r0, r2, #5
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4621      	mov	r1, r4
 8002014:	1a51      	subs	r1, r2, r1
 8002016:	6439      	str	r1, [r7, #64]	; 0x40
 8002018:	4629      	mov	r1, r5
 800201a:	eb63 0301 	sbc.w	r3, r3, r1
 800201e:	647b      	str	r3, [r7, #68]	; 0x44
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	f04f 0300 	mov.w	r3, #0
 8002028:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800202c:	4649      	mov	r1, r9
 800202e:	018b      	lsls	r3, r1, #6
 8002030:	4641      	mov	r1, r8
 8002032:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002036:	4641      	mov	r1, r8
 8002038:	018a      	lsls	r2, r1, #6
 800203a:	4641      	mov	r1, r8
 800203c:	1a51      	subs	r1, r2, r1
 800203e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002040:	4649      	mov	r1, r9
 8002042:	eb63 0301 	sbc.w	r3, r3, r1
 8002046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	f04f 0300 	mov.w	r3, #0
 8002050:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002054:	4649      	mov	r1, r9
 8002056:	00cb      	lsls	r3, r1, #3
 8002058:	4641      	mov	r1, r8
 800205a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800205e:	4641      	mov	r1, r8
 8002060:	00ca      	lsls	r2, r1, #3
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	4603      	mov	r3, r0
 8002068:	4622      	mov	r2, r4
 800206a:	189b      	adds	r3, r3, r2
 800206c:	633b      	str	r3, [r7, #48]	; 0x30
 800206e:	462b      	mov	r3, r5
 8002070:	460a      	mov	r2, r1
 8002072:	eb42 0303 	adc.w	r3, r2, r3
 8002076:	637b      	str	r3, [r7, #52]	; 0x34
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	f04f 0300 	mov.w	r3, #0
 8002080:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002084:	4629      	mov	r1, r5
 8002086:	024b      	lsls	r3, r1, #9
 8002088:	4621      	mov	r1, r4
 800208a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800208e:	4621      	mov	r1, r4
 8002090:	024a      	lsls	r2, r1, #9
 8002092:	4610      	mov	r0, r2
 8002094:	4619      	mov	r1, r3
 8002096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800209a:	2200      	movs	r2, #0
 800209c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80020a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80020a4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80020a8:	f7fe f902 	bl	80002b0 <__aeabi_uldivmod>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4613      	mov	r3, r2
 80020b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020b6:	e067      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020b8:	4b75      	ldr	r3, [pc, #468]	; (8002290 <HAL_RCC_GetSysClockFreq+0x354>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	099b      	lsrs	r3, r3, #6
 80020be:	2200      	movs	r2, #0
 80020c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80020c4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80020c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80020d2:	2300      	movs	r3, #0
 80020d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80020d6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80020da:	4622      	mov	r2, r4
 80020dc:	462b      	mov	r3, r5
 80020de:	f04f 0000 	mov.w	r0, #0
 80020e2:	f04f 0100 	mov.w	r1, #0
 80020e6:	0159      	lsls	r1, r3, #5
 80020e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020ec:	0150      	lsls	r0, r2, #5
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4621      	mov	r1, r4
 80020f4:	1a51      	subs	r1, r2, r1
 80020f6:	62b9      	str	r1, [r7, #40]	; 0x28
 80020f8:	4629      	mov	r1, r5
 80020fa:	eb63 0301 	sbc.w	r3, r3, r1
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800210c:	4649      	mov	r1, r9
 800210e:	018b      	lsls	r3, r1, #6
 8002110:	4641      	mov	r1, r8
 8002112:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002116:	4641      	mov	r1, r8
 8002118:	018a      	lsls	r2, r1, #6
 800211a:	4641      	mov	r1, r8
 800211c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002120:	4649      	mov	r1, r9
 8002122:	eb63 0b01 	sbc.w	fp, r3, r1
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002132:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002136:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800213a:	4692      	mov	sl, r2
 800213c:	469b      	mov	fp, r3
 800213e:	4623      	mov	r3, r4
 8002140:	eb1a 0303 	adds.w	r3, sl, r3
 8002144:	623b      	str	r3, [r7, #32]
 8002146:	462b      	mov	r3, r5
 8002148:	eb4b 0303 	adc.w	r3, fp, r3
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	f04f 0300 	mov.w	r3, #0
 8002156:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800215a:	4629      	mov	r1, r5
 800215c:	028b      	lsls	r3, r1, #10
 800215e:	4621      	mov	r1, r4
 8002160:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002164:	4621      	mov	r1, r4
 8002166:	028a      	lsls	r2, r1, #10
 8002168:	4610      	mov	r0, r2
 800216a:	4619      	mov	r1, r3
 800216c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002170:	2200      	movs	r2, #0
 8002172:	673b      	str	r3, [r7, #112]	; 0x70
 8002174:	677a      	str	r2, [r7, #116]	; 0x74
 8002176:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800217a:	f7fe f899 	bl	80002b0 <__aeabi_uldivmod>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4613      	mov	r3, r2
 8002184:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002188:	4b41      	ldr	r3, [pc, #260]	; (8002290 <HAL_RCC_GetSysClockFreq+0x354>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	0c1b      	lsrs	r3, r3, #16
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	3301      	adds	r3, #1
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800219a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800219e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80021a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80021aa:	e0eb      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021ac:	4b38      	ldr	r3, [pc, #224]	; (8002290 <HAL_RCC_GetSysClockFreq+0x354>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021b8:	4b35      	ldr	r3, [pc, #212]	; (8002290 <HAL_RCC_GetSysClockFreq+0x354>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d06b      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021c4:	4b32      	ldr	r3, [pc, #200]	; (8002290 <HAL_RCC_GetSysClockFreq+0x354>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	099b      	lsrs	r3, r3, #6
 80021ca:	2200      	movs	r2, #0
 80021cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80021ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80021d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021d6:	663b      	str	r3, [r7, #96]	; 0x60
 80021d8:	2300      	movs	r3, #0
 80021da:	667b      	str	r3, [r7, #100]	; 0x64
 80021dc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80021e0:	4622      	mov	r2, r4
 80021e2:	462b      	mov	r3, r5
 80021e4:	f04f 0000 	mov.w	r0, #0
 80021e8:	f04f 0100 	mov.w	r1, #0
 80021ec:	0159      	lsls	r1, r3, #5
 80021ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021f2:	0150      	lsls	r0, r2, #5
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4621      	mov	r1, r4
 80021fa:	1a51      	subs	r1, r2, r1
 80021fc:	61b9      	str	r1, [r7, #24]
 80021fe:	4629      	mov	r1, r5
 8002200:	eb63 0301 	sbc.w	r3, r3, r1
 8002204:	61fb      	str	r3, [r7, #28]
 8002206:	f04f 0200 	mov.w	r2, #0
 800220a:	f04f 0300 	mov.w	r3, #0
 800220e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002212:	4659      	mov	r1, fp
 8002214:	018b      	lsls	r3, r1, #6
 8002216:	4651      	mov	r1, sl
 8002218:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800221c:	4651      	mov	r1, sl
 800221e:	018a      	lsls	r2, r1, #6
 8002220:	4651      	mov	r1, sl
 8002222:	ebb2 0801 	subs.w	r8, r2, r1
 8002226:	4659      	mov	r1, fp
 8002228:	eb63 0901 	sbc.w	r9, r3, r1
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002238:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800223c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002240:	4690      	mov	r8, r2
 8002242:	4699      	mov	r9, r3
 8002244:	4623      	mov	r3, r4
 8002246:	eb18 0303 	adds.w	r3, r8, r3
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	462b      	mov	r3, r5
 800224e:	eb49 0303 	adc.w	r3, r9, r3
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002260:	4629      	mov	r1, r5
 8002262:	024b      	lsls	r3, r1, #9
 8002264:	4621      	mov	r1, r4
 8002266:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800226a:	4621      	mov	r1, r4
 800226c:	024a      	lsls	r2, r1, #9
 800226e:	4610      	mov	r0, r2
 8002270:	4619      	mov	r1, r3
 8002272:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002276:	2200      	movs	r2, #0
 8002278:	65bb      	str	r3, [r7, #88]	; 0x58
 800227a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800227c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002280:	f7fe f816 	bl	80002b0 <__aeabi_uldivmod>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4613      	mov	r3, r2
 800228a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800228e:	e065      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x420>
 8002290:	40023800 	.word	0x40023800
 8002294:	00f42400 	.word	0x00f42400
 8002298:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800229c:	4b3d      	ldr	r3, [pc, #244]	; (8002394 <HAL_RCC_GetSysClockFreq+0x458>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	099b      	lsrs	r3, r3, #6
 80022a2:	2200      	movs	r2, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	4611      	mov	r1, r2
 80022a8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022ac:	653b      	str	r3, [r7, #80]	; 0x50
 80022ae:	2300      	movs	r3, #0
 80022b0:	657b      	str	r3, [r7, #84]	; 0x54
 80022b2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80022b6:	4642      	mov	r2, r8
 80022b8:	464b      	mov	r3, r9
 80022ba:	f04f 0000 	mov.w	r0, #0
 80022be:	f04f 0100 	mov.w	r1, #0
 80022c2:	0159      	lsls	r1, r3, #5
 80022c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022c8:	0150      	lsls	r0, r2, #5
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	4641      	mov	r1, r8
 80022d0:	1a51      	subs	r1, r2, r1
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	4649      	mov	r1, r9
 80022d6:	eb63 0301 	sbc.w	r3, r3, r1
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80022e8:	4659      	mov	r1, fp
 80022ea:	018b      	lsls	r3, r1, #6
 80022ec:	4651      	mov	r1, sl
 80022ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022f2:	4651      	mov	r1, sl
 80022f4:	018a      	lsls	r2, r1, #6
 80022f6:	4651      	mov	r1, sl
 80022f8:	1a54      	subs	r4, r2, r1
 80022fa:	4659      	mov	r1, fp
 80022fc:	eb63 0501 	sbc.w	r5, r3, r1
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	f04f 0300 	mov.w	r3, #0
 8002308:	00eb      	lsls	r3, r5, #3
 800230a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800230e:	00e2      	lsls	r2, r4, #3
 8002310:	4614      	mov	r4, r2
 8002312:	461d      	mov	r5, r3
 8002314:	4643      	mov	r3, r8
 8002316:	18e3      	adds	r3, r4, r3
 8002318:	603b      	str	r3, [r7, #0]
 800231a:	464b      	mov	r3, r9
 800231c:	eb45 0303 	adc.w	r3, r5, r3
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800232e:	4629      	mov	r1, r5
 8002330:	028b      	lsls	r3, r1, #10
 8002332:	4621      	mov	r1, r4
 8002334:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002338:	4621      	mov	r1, r4
 800233a:	028a      	lsls	r2, r1, #10
 800233c:	4610      	mov	r0, r2
 800233e:	4619      	mov	r1, r3
 8002340:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002344:	2200      	movs	r2, #0
 8002346:	64bb      	str	r3, [r7, #72]	; 0x48
 8002348:	64fa      	str	r2, [r7, #76]	; 0x4c
 800234a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800234e:	f7fd ffaf 	bl	80002b0 <__aeabi_uldivmod>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4613      	mov	r3, r2
 8002358:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800235c:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <HAL_RCC_GetSysClockFreq+0x458>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	0f1b      	lsrs	r3, r3, #28
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800236a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800236e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002372:	fbb2 f3f3 	udiv	r3, r2, r3
 8002376:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800237a:	e003      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_RCC_GetSysClockFreq+0x45c>)
 800237e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002382:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002384:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002388:	4618      	mov	r0, r3
 800238a:	37b8      	adds	r7, #184	; 0xb8
 800238c:	46bd      	mov	sp, r7
 800238e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002392:	bf00      	nop
 8002394:	40023800 	.word	0x40023800
 8002398:	00f42400 	.word	0x00f42400

0800239c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e28d      	b.n	80028ca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 8083 	beq.w	80024c2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023bc:	4b94      	ldr	r3, [pc, #592]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 030c 	and.w	r3, r3, #12
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d019      	beq.n	80023fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023c8:	4b91      	ldr	r3, [pc, #580]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d106      	bne.n	80023e2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023d4:	4b8e      	ldr	r3, [pc, #568]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023e0:	d00c      	beq.n	80023fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023e2:	4b8b      	ldr	r3, [pc, #556]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023ea:	2b0c      	cmp	r3, #12
 80023ec:	d112      	bne.n	8002414 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ee:	4b88      	ldr	r3, [pc, #544]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023fa:	d10b      	bne.n	8002414 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023fc:	4b84      	ldr	r3, [pc, #528]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d05b      	beq.n	80024c0 <HAL_RCC_OscConfig+0x124>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d157      	bne.n	80024c0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e25a      	b.n	80028ca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800241c:	d106      	bne.n	800242c <HAL_RCC_OscConfig+0x90>
 800241e:	4b7c      	ldr	r3, [pc, #496]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a7b      	ldr	r2, [pc, #492]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 8002424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	e01d      	b.n	8002468 <HAL_RCC_OscConfig+0xcc>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002434:	d10c      	bne.n	8002450 <HAL_RCC_OscConfig+0xb4>
 8002436:	4b76      	ldr	r3, [pc, #472]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a75      	ldr	r2, [pc, #468]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 800243c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	4b73      	ldr	r3, [pc, #460]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a72      	ldr	r2, [pc, #456]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 8002448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	e00b      	b.n	8002468 <HAL_RCC_OscConfig+0xcc>
 8002450:	4b6f      	ldr	r3, [pc, #444]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a6e      	ldr	r2, [pc, #440]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 8002456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800245a:	6013      	str	r3, [r2, #0]
 800245c:	4b6c      	ldr	r3, [pc, #432]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a6b      	ldr	r2, [pc, #428]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 8002462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d013      	beq.n	8002498 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7fe fcea 	bl	8000e48 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002478:	f7fe fce6 	bl	8000e48 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b64      	cmp	r3, #100	; 0x64
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e21f      	b.n	80028ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248a:	4b61      	ldr	r3, [pc, #388]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0xdc>
 8002496:	e014      	b.n	80024c2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7fe fcd6 	bl	8000e48 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024a0:	f7fe fcd2 	bl	8000e48 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b64      	cmp	r3, #100	; 0x64
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e20b      	b.n	80028ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b2:	4b57      	ldr	r3, [pc, #348]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x104>
 80024be:	e000      	b.n	80024c2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d06f      	beq.n	80025ae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024ce:	4b50      	ldr	r3, [pc, #320]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d017      	beq.n	800250a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024da:	4b4d      	ldr	r3, [pc, #308]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d105      	bne.n	80024f2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024e6:	4b4a      	ldr	r3, [pc, #296]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00b      	beq.n	800250a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024f2:	4b47      	ldr	r3, [pc, #284]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024fa:	2b0c      	cmp	r3, #12
 80024fc:	d11c      	bne.n	8002538 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024fe:	4b44      	ldr	r3, [pc, #272]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d116      	bne.n	8002538 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250a:	4b41      	ldr	r3, [pc, #260]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d005      	beq.n	8002522 <HAL_RCC_OscConfig+0x186>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d001      	beq.n	8002522 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e1d3      	b.n	80028ca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002522:	4b3b      	ldr	r3, [pc, #236]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4937      	ldr	r1, [pc, #220]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 8002532:	4313      	orrs	r3, r2
 8002534:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002536:	e03a      	b.n	80025ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d020      	beq.n	8002582 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002540:	4b34      	ldr	r3, [pc, #208]	; (8002614 <HAL_RCC_OscConfig+0x278>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002546:	f7fe fc7f 	bl	8000e48 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800254e:	f7fe fc7b 	bl	8000e48 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e1b4      	b.n	80028ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002560:	4b2b      	ldr	r3, [pc, #172]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256c:	4b28      	ldr	r3, [pc, #160]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4925      	ldr	r1, [pc, #148]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 800257c:	4313      	orrs	r3, r2
 800257e:	600b      	str	r3, [r1, #0]
 8002580:	e015      	b.n	80025ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002582:	4b24      	ldr	r3, [pc, #144]	; (8002614 <HAL_RCC_OscConfig+0x278>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7fe fc5e 	bl	8000e48 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002590:	f7fe fc5a 	bl	8000e48 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e193      	b.n	80028ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a2:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d036      	beq.n	8002628 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d016      	beq.n	80025f0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025c2:	4b15      	ldr	r3, [pc, #84]	; (8002618 <HAL_RCC_OscConfig+0x27c>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c8:	f7fe fc3e 	bl	8000e48 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d0:	f7fe fc3a 	bl	8000e48 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e173      	b.n	80028ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e2:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_RCC_OscConfig+0x274>)
 80025e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0x234>
 80025ee:	e01b      	b.n	8002628 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f0:	4b09      	ldr	r3, [pc, #36]	; (8002618 <HAL_RCC_OscConfig+0x27c>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f6:	f7fe fc27 	bl	8000e48 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025fc:	e00e      	b.n	800261c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025fe:	f7fe fc23 	bl	8000e48 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d907      	bls.n	800261c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e15c      	b.n	80028ca <HAL_RCC_OscConfig+0x52e>
 8002610:	40023800 	.word	0x40023800
 8002614:	42470000 	.word	0x42470000
 8002618:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800261c:	4b8a      	ldr	r3, [pc, #552]	; (8002848 <HAL_RCC_OscConfig+0x4ac>)
 800261e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1ea      	bne.n	80025fe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 8097 	beq.w	8002764 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002636:	2300      	movs	r3, #0
 8002638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800263a:	4b83      	ldr	r3, [pc, #524]	; (8002848 <HAL_RCC_OscConfig+0x4ac>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10f      	bne.n	8002666 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	4b7f      	ldr	r3, [pc, #508]	; (8002848 <HAL_RCC_OscConfig+0x4ac>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	4a7e      	ldr	r2, [pc, #504]	; (8002848 <HAL_RCC_OscConfig+0x4ac>)
 8002650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002654:	6413      	str	r3, [r2, #64]	; 0x40
 8002656:	4b7c      	ldr	r3, [pc, #496]	; (8002848 <HAL_RCC_OscConfig+0x4ac>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002662:	2301      	movs	r3, #1
 8002664:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002666:	4b79      	ldr	r3, [pc, #484]	; (800284c <HAL_RCC_OscConfig+0x4b0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d118      	bne.n	80026a4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002672:	4b76      	ldr	r3, [pc, #472]	; (800284c <HAL_RCC_OscConfig+0x4b0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a75      	ldr	r2, [pc, #468]	; (800284c <HAL_RCC_OscConfig+0x4b0>)
 8002678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800267e:	f7fe fbe3 	bl	8000e48 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002686:	f7fe fbdf 	bl	8000e48 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e118      	b.n	80028ca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002698:	4b6c      	ldr	r3, [pc, #432]	; (800284c <HAL_RCC_OscConfig+0x4b0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d106      	bne.n	80026ba <HAL_RCC_OscConfig+0x31e>
 80026ac:	4b66      	ldr	r3, [pc, #408]	; (8002848 <HAL_RCC_OscConfig+0x4ac>)
 80026ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b0:	4a65      	ldr	r2, [pc, #404]	; (8002848 <HAL_RCC_OscConfig+0x4ac>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6713      	str	r3, [r2, #112]	; 0x70
 80026b8:	e01c      	b.n	80026f4 <HAL_RCC_OscConfig+0x358>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2b05      	cmp	r3, #5
 80026c0:	d10c      	bne.n	80026dc <HAL_RCC_OscConfig+0x340>
 80026c2:	4b61      	ldr	r3, [pc, #388]	; (8002848 <HAL_RCC_OscConfig+0x4ac>)
 80026c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c6:	4a60      	ldr	r2, [pc, #384]	; (8002848 <HAL_RCC_OscConfig+0x4ac>)
 80026c8:	f043 0304 	orr.w	r3, r3, #4
 80026cc:	6713      	str	r3, [r2, #112]	; 0x70
 80026ce:	4b5e      	ldr	r3, [pc, #376]	; (8002848 <HAL_RCC_OscConfig+0x4ac>)
 80026d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d2:	4a5d      	ldr	r2, [pc, #372]	; (8002848 <HAL_RCC_OscConfig+0x4ac>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6713      	str	r3, [r2, #112]	; 0x70
 80026da:	e00b      	b.n	80026f4 <HAL_RCC_OscConfig+0x358>
 80026dc:	4b5a      	ldr	r3, [pc, #360]	; (8002848 <HAL_RCC_OscConfig+0x4ac>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	4a59      	ldr	r2, [pc, #356]	; (8002848 <HAL_RCC_OscConfig+0x4ac>)
 80026e2:	f023 0301 	bic.w	r3, r3, #1
 80026e6:	6713      	str	r3, [r2, #112]	; 0x70
 80026e8:	4b57      	ldr	r3, [pc, #348]	; (8002848 <HAL_RCC_OscConfig+0x4ac>)
 80026ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ec:	4a56      	ldr	r2, [pc, #344]	; (8002848 <HAL_RCC_OscConfig+0x4ac>)
 80026ee:	f023 0304 	bic.w	r3, r3, #4
 80026f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d015      	beq.n	8002728 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fc:	f7fe fba4 	bl	8000e48 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002702:	e00a      	b.n	800271a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002704:	f7fe fba0 	bl	8000e48 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e0d7      	b.n	80028ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271a:	4b4b      	ldr	r3, [pc, #300]	; (8002848 <HAL_RCC_OscConfig+0x4ac>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0ee      	beq.n	8002704 <HAL_RCC_OscConfig+0x368>
 8002726:	e014      	b.n	8002752 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002728:	f7fe fb8e 	bl	8000e48 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800272e:	e00a      	b.n	8002746 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002730:	f7fe fb8a 	bl	8000e48 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	; 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e0c1      	b.n	80028ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002746:	4b40      	ldr	r3, [pc, #256]	; (8002848 <HAL_RCC_OscConfig+0x4ac>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1ee      	bne.n	8002730 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002752:	7dfb      	ldrb	r3, [r7, #23]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d105      	bne.n	8002764 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002758:	4b3b      	ldr	r3, [pc, #236]	; (8002848 <HAL_RCC_OscConfig+0x4ac>)
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	4a3a      	ldr	r2, [pc, #232]	; (8002848 <HAL_RCC_OscConfig+0x4ac>)
 800275e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002762:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 80ad 	beq.w	80028c8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800276e:	4b36      	ldr	r3, [pc, #216]	; (8002848 <HAL_RCC_OscConfig+0x4ac>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 030c 	and.w	r3, r3, #12
 8002776:	2b08      	cmp	r3, #8
 8002778:	d060      	beq.n	800283c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d145      	bne.n	800280e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002782:	4b33      	ldr	r3, [pc, #204]	; (8002850 <HAL_RCC_OscConfig+0x4b4>)
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7fe fb5e 	bl	8000e48 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002790:	f7fe fb5a 	bl	8000e48 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e093      	b.n	80028ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a2:	4b29      	ldr	r3, [pc, #164]	; (8002848 <HAL_RCC_OscConfig+0x4ac>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69da      	ldr	r2, [r3, #28]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	019b      	lsls	r3, r3, #6
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	085b      	lsrs	r3, r3, #1
 80027c6:	3b01      	subs	r3, #1
 80027c8:	041b      	lsls	r3, r3, #16
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	061b      	lsls	r3, r3, #24
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	071b      	lsls	r3, r3, #28
 80027da:	491b      	ldr	r1, [pc, #108]	; (8002848 <HAL_RCC_OscConfig+0x4ac>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e0:	4b1b      	ldr	r3, [pc, #108]	; (8002850 <HAL_RCC_OscConfig+0x4b4>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e6:	f7fe fb2f 	bl	8000e48 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ee:	f7fe fb2b 	bl	8000e48 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e064      	b.n	80028ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002800:	4b11      	ldr	r3, [pc, #68]	; (8002848 <HAL_RCC_OscConfig+0x4ac>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x452>
 800280c:	e05c      	b.n	80028c8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280e:	4b10      	ldr	r3, [pc, #64]	; (8002850 <HAL_RCC_OscConfig+0x4b4>)
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7fe fb18 	bl	8000e48 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800281c:	f7fe fb14 	bl	8000e48 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e04d      	b.n	80028ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282e:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_RCC_OscConfig+0x4ac>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x480>
 800283a:	e045      	b.n	80028c8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d107      	bne.n	8002854 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e040      	b.n	80028ca <HAL_RCC_OscConfig+0x52e>
 8002848:	40023800 	.word	0x40023800
 800284c:	40007000 	.word	0x40007000
 8002850:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002854:	4b1f      	ldr	r3, [pc, #124]	; (80028d4 <HAL_RCC_OscConfig+0x538>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d030      	beq.n	80028c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800286c:	429a      	cmp	r2, r3
 800286e:	d129      	bne.n	80028c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800287a:	429a      	cmp	r2, r3
 800287c:	d122      	bne.n	80028c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002884:	4013      	ands	r3, r2
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800288a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800288c:	4293      	cmp	r3, r2
 800288e:	d119      	bne.n	80028c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289a:	085b      	lsrs	r3, r3, #1
 800289c:	3b01      	subs	r3, #1
 800289e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d10f      	bne.n	80028c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d107      	bne.n	80028c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e000      	b.n	80028ca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800

080028d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e03f      	b.n	800296a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d106      	bne.n	8002904 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fe f958 	bl	8000bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2224      	movs	r2, #36	; 0x24
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800291a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 f829 	bl	8002974 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002930:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695a      	ldr	r2, [r3, #20]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002940:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002950:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002978:	b0c0      	sub	sp, #256	; 0x100
 800297a:	af00      	add	r7, sp, #0
 800297c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800298c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002990:	68d9      	ldr	r1, [r3, #12]
 8002992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	ea40 0301 	orr.w	r3, r0, r1
 800299c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800299e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	431a      	orrs	r2, r3
 80029ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80029cc:	f021 010c 	bic.w	r1, r1, #12
 80029d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80029da:	430b      	orrs	r3, r1
 80029dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80029ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ee:	6999      	ldr	r1, [r3, #24]
 80029f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	ea40 0301 	orr.w	r3, r0, r1
 80029fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4b8f      	ldr	r3, [pc, #572]	; (8002c40 <UART_SetConfig+0x2cc>)
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d005      	beq.n	8002a14 <UART_SetConfig+0xa0>
 8002a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	4b8d      	ldr	r3, [pc, #564]	; (8002c44 <UART_SetConfig+0x2d0>)
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d104      	bne.n	8002a1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a14:	f7ff fa7e 	bl	8001f14 <HAL_RCC_GetPCLK2Freq>
 8002a18:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a1c:	e003      	b.n	8002a26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a1e:	f7ff fa65 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8002a22:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a30:	f040 810c 	bne.w	8002c4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a3e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a46:	4622      	mov	r2, r4
 8002a48:	462b      	mov	r3, r5
 8002a4a:	1891      	adds	r1, r2, r2
 8002a4c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a4e:	415b      	adcs	r3, r3
 8002a50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a56:	4621      	mov	r1, r4
 8002a58:	eb12 0801 	adds.w	r8, r2, r1
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	eb43 0901 	adc.w	r9, r3, r1
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a76:	4690      	mov	r8, r2
 8002a78:	4699      	mov	r9, r3
 8002a7a:	4623      	mov	r3, r4
 8002a7c:	eb18 0303 	adds.w	r3, r8, r3
 8002a80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a84:	462b      	mov	r3, r5
 8002a86:	eb49 0303 	adc.w	r3, r9, r3
 8002a8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a9a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	18db      	adds	r3, r3, r3
 8002aa6:	653b      	str	r3, [r7, #80]	; 0x50
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	eb42 0303 	adc.w	r3, r2, r3
 8002aae:	657b      	str	r3, [r7, #84]	; 0x54
 8002ab0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ab4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ab8:	f7fd fbfa 	bl	80002b0 <__aeabi_uldivmod>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4b61      	ldr	r3, [pc, #388]	; (8002c48 <UART_SetConfig+0x2d4>)
 8002ac2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	011c      	lsls	r4, r3, #4
 8002aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ad4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ad8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002adc:	4642      	mov	r2, r8
 8002ade:	464b      	mov	r3, r9
 8002ae0:	1891      	adds	r1, r2, r2
 8002ae2:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ae4:	415b      	adcs	r3, r3
 8002ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ae8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002aec:	4641      	mov	r1, r8
 8002aee:	eb12 0a01 	adds.w	sl, r2, r1
 8002af2:	4649      	mov	r1, r9
 8002af4:	eb43 0b01 	adc.w	fp, r3, r1
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b0c:	4692      	mov	sl, r2
 8002b0e:	469b      	mov	fp, r3
 8002b10:	4643      	mov	r3, r8
 8002b12:	eb1a 0303 	adds.w	r3, sl, r3
 8002b16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b1a:	464b      	mov	r3, r9
 8002b1c:	eb4b 0303 	adc.w	r3, fp, r3
 8002b20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b30:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	18db      	adds	r3, r3, r3
 8002b3c:	643b      	str	r3, [r7, #64]	; 0x40
 8002b3e:	4613      	mov	r3, r2
 8002b40:	eb42 0303 	adc.w	r3, r2, r3
 8002b44:	647b      	str	r3, [r7, #68]	; 0x44
 8002b46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b4e:	f7fd fbaf 	bl	80002b0 <__aeabi_uldivmod>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4611      	mov	r1, r2
 8002b58:	4b3b      	ldr	r3, [pc, #236]	; (8002c48 <UART_SetConfig+0x2d4>)
 8002b5a:	fba3 2301 	umull	r2, r3, r3, r1
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	2264      	movs	r2, #100	; 0x64
 8002b62:	fb02 f303 	mul.w	r3, r2, r3
 8002b66:	1acb      	subs	r3, r1, r3
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b6e:	4b36      	ldr	r3, [pc, #216]	; (8002c48 <UART_SetConfig+0x2d4>)
 8002b70:	fba3 2302 	umull	r2, r3, r3, r2
 8002b74:	095b      	lsrs	r3, r3, #5
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b7c:	441c      	add	r4, r3
 8002b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b82:	2200      	movs	r2, #0
 8002b84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b88:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b90:	4642      	mov	r2, r8
 8002b92:	464b      	mov	r3, r9
 8002b94:	1891      	adds	r1, r2, r2
 8002b96:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b98:	415b      	adcs	r3, r3
 8002b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ba0:	4641      	mov	r1, r8
 8002ba2:	1851      	adds	r1, r2, r1
 8002ba4:	6339      	str	r1, [r7, #48]	; 0x30
 8002ba6:	4649      	mov	r1, r9
 8002ba8:	414b      	adcs	r3, r1
 8002baa:	637b      	str	r3, [r7, #52]	; 0x34
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002bb8:	4659      	mov	r1, fp
 8002bba:	00cb      	lsls	r3, r1, #3
 8002bbc:	4651      	mov	r1, sl
 8002bbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bc2:	4651      	mov	r1, sl
 8002bc4:	00ca      	lsls	r2, r1, #3
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4603      	mov	r3, r0
 8002bcc:	4642      	mov	r2, r8
 8002bce:	189b      	adds	r3, r3, r2
 8002bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bd4:	464b      	mov	r3, r9
 8002bd6:	460a      	mov	r2, r1
 8002bd8:	eb42 0303 	adc.w	r3, r2, r3
 8002bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002bec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002bf0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	18db      	adds	r3, r3, r3
 8002bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	eb42 0303 	adc.w	r3, r2, r3
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002c0a:	f7fd fb51 	bl	80002b0 <__aeabi_uldivmod>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	4b0d      	ldr	r3, [pc, #52]	; (8002c48 <UART_SetConfig+0x2d4>)
 8002c14:	fba3 1302 	umull	r1, r3, r3, r2
 8002c18:	095b      	lsrs	r3, r3, #5
 8002c1a:	2164      	movs	r1, #100	; 0x64
 8002c1c:	fb01 f303 	mul.w	r3, r1, r3
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	3332      	adds	r3, #50	; 0x32
 8002c26:	4a08      	ldr	r2, [pc, #32]	; (8002c48 <UART_SetConfig+0x2d4>)
 8002c28:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2c:	095b      	lsrs	r3, r3, #5
 8002c2e:	f003 0207 	and.w	r2, r3, #7
 8002c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4422      	add	r2, r4
 8002c3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c3c:	e105      	b.n	8002e4a <UART_SetConfig+0x4d6>
 8002c3e:	bf00      	nop
 8002c40:	40011000 	.word	0x40011000
 8002c44:	40011400 	.word	0x40011400
 8002c48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c50:	2200      	movs	r2, #0
 8002c52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c56:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c5e:	4642      	mov	r2, r8
 8002c60:	464b      	mov	r3, r9
 8002c62:	1891      	adds	r1, r2, r2
 8002c64:	6239      	str	r1, [r7, #32]
 8002c66:	415b      	adcs	r3, r3
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c6e:	4641      	mov	r1, r8
 8002c70:	1854      	adds	r4, r2, r1
 8002c72:	4649      	mov	r1, r9
 8002c74:	eb43 0501 	adc.w	r5, r3, r1
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	00eb      	lsls	r3, r5, #3
 8002c82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c86:	00e2      	lsls	r2, r4, #3
 8002c88:	4614      	mov	r4, r2
 8002c8a:	461d      	mov	r5, r3
 8002c8c:	4643      	mov	r3, r8
 8002c8e:	18e3      	adds	r3, r4, r3
 8002c90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c94:	464b      	mov	r3, r9
 8002c96:	eb45 0303 	adc.w	r3, r5, r3
 8002c9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002caa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	f04f 0300 	mov.w	r3, #0
 8002cb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002cba:	4629      	mov	r1, r5
 8002cbc:	008b      	lsls	r3, r1, #2
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cc4:	4621      	mov	r1, r4
 8002cc6:	008a      	lsls	r2, r1, #2
 8002cc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002ccc:	f7fd faf0 	bl	80002b0 <__aeabi_uldivmod>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4b60      	ldr	r3, [pc, #384]	; (8002e58 <UART_SetConfig+0x4e4>)
 8002cd6:	fba3 2302 	umull	r2, r3, r3, r2
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	011c      	lsls	r4, r3, #4
 8002cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ce8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002cec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002cf0:	4642      	mov	r2, r8
 8002cf2:	464b      	mov	r3, r9
 8002cf4:	1891      	adds	r1, r2, r2
 8002cf6:	61b9      	str	r1, [r7, #24]
 8002cf8:	415b      	adcs	r3, r3
 8002cfa:	61fb      	str	r3, [r7, #28]
 8002cfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d00:	4641      	mov	r1, r8
 8002d02:	1851      	adds	r1, r2, r1
 8002d04:	6139      	str	r1, [r7, #16]
 8002d06:	4649      	mov	r1, r9
 8002d08:	414b      	adcs	r3, r1
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d18:	4659      	mov	r1, fp
 8002d1a:	00cb      	lsls	r3, r1, #3
 8002d1c:	4651      	mov	r1, sl
 8002d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d22:	4651      	mov	r1, sl
 8002d24:	00ca      	lsls	r2, r1, #3
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	4642      	mov	r2, r8
 8002d2e:	189b      	adds	r3, r3, r2
 8002d30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d34:	464b      	mov	r3, r9
 8002d36:	460a      	mov	r2, r1
 8002d38:	eb42 0303 	adc.w	r3, r2, r3
 8002d3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d58:	4649      	mov	r1, r9
 8002d5a:	008b      	lsls	r3, r1, #2
 8002d5c:	4641      	mov	r1, r8
 8002d5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d62:	4641      	mov	r1, r8
 8002d64:	008a      	lsls	r2, r1, #2
 8002d66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d6a:	f7fd faa1 	bl	80002b0 <__aeabi_uldivmod>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4b39      	ldr	r3, [pc, #228]	; (8002e58 <UART_SetConfig+0x4e4>)
 8002d74:	fba3 1302 	umull	r1, r3, r3, r2
 8002d78:	095b      	lsrs	r3, r3, #5
 8002d7a:	2164      	movs	r1, #100	; 0x64
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	3332      	adds	r3, #50	; 0x32
 8002d86:	4a34      	ldr	r2, [pc, #208]	; (8002e58 <UART_SetConfig+0x4e4>)
 8002d88:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8c:	095b      	lsrs	r3, r3, #5
 8002d8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d92:	441c      	add	r4, r3
 8002d94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d98:	2200      	movs	r2, #0
 8002d9a:	673b      	str	r3, [r7, #112]	; 0x70
 8002d9c:	677a      	str	r2, [r7, #116]	; 0x74
 8002d9e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002da2:	4642      	mov	r2, r8
 8002da4:	464b      	mov	r3, r9
 8002da6:	1891      	adds	r1, r2, r2
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	415b      	adcs	r3, r3
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002db2:	4641      	mov	r1, r8
 8002db4:	1851      	adds	r1, r2, r1
 8002db6:	6039      	str	r1, [r7, #0]
 8002db8:	4649      	mov	r1, r9
 8002dba:	414b      	adcs	r3, r1
 8002dbc:	607b      	str	r3, [r7, #4]
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002dca:	4659      	mov	r1, fp
 8002dcc:	00cb      	lsls	r3, r1, #3
 8002dce:	4651      	mov	r1, sl
 8002dd0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dd4:	4651      	mov	r1, sl
 8002dd6:	00ca      	lsls	r2, r1, #3
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4642      	mov	r2, r8
 8002de0:	189b      	adds	r3, r3, r2
 8002de2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002de4:	464b      	mov	r3, r9
 8002de6:	460a      	mov	r2, r1
 8002de8:	eb42 0303 	adc.w	r3, r2, r3
 8002dec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	663b      	str	r3, [r7, #96]	; 0x60
 8002df8:	667a      	str	r2, [r7, #100]	; 0x64
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002e06:	4649      	mov	r1, r9
 8002e08:	008b      	lsls	r3, r1, #2
 8002e0a:	4641      	mov	r1, r8
 8002e0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e10:	4641      	mov	r1, r8
 8002e12:	008a      	lsls	r2, r1, #2
 8002e14:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e18:	f7fd fa4a 	bl	80002b0 <__aeabi_uldivmod>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4b0d      	ldr	r3, [pc, #52]	; (8002e58 <UART_SetConfig+0x4e4>)
 8002e22:	fba3 1302 	umull	r1, r3, r3, r2
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	2164      	movs	r1, #100	; 0x64
 8002e2a:	fb01 f303 	mul.w	r3, r1, r3
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	3332      	adds	r3, #50	; 0x32
 8002e34:	4a08      	ldr	r2, [pc, #32]	; (8002e58 <UART_SetConfig+0x4e4>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	095b      	lsrs	r3, r3, #5
 8002e3c:	f003 020f 	and.w	r2, r3, #15
 8002e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4422      	add	r2, r4
 8002e48:	609a      	str	r2, [r3, #8]
}
 8002e4a:	bf00      	nop
 8002e4c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e50:	46bd      	mov	sp, r7
 8002e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e56:	bf00      	nop
 8002e58:	51eb851f 	.word	0x51eb851f

08002e5c <__errno>:
 8002e5c:	4b01      	ldr	r3, [pc, #4]	; (8002e64 <__errno+0x8>)
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	20000010 	.word	0x20000010

08002e68 <__libc_init_array>:
 8002e68:	b570      	push	{r4, r5, r6, lr}
 8002e6a:	4d0d      	ldr	r5, [pc, #52]	; (8002ea0 <__libc_init_array+0x38>)
 8002e6c:	4c0d      	ldr	r4, [pc, #52]	; (8002ea4 <__libc_init_array+0x3c>)
 8002e6e:	1b64      	subs	r4, r4, r5
 8002e70:	10a4      	asrs	r4, r4, #2
 8002e72:	2600      	movs	r6, #0
 8002e74:	42a6      	cmp	r6, r4
 8002e76:	d109      	bne.n	8002e8c <__libc_init_array+0x24>
 8002e78:	4d0b      	ldr	r5, [pc, #44]	; (8002ea8 <__libc_init_array+0x40>)
 8002e7a:	4c0c      	ldr	r4, [pc, #48]	; (8002eac <__libc_init_array+0x44>)
 8002e7c:	f000 fc8e 	bl	800379c <_init>
 8002e80:	1b64      	subs	r4, r4, r5
 8002e82:	10a4      	asrs	r4, r4, #2
 8002e84:	2600      	movs	r6, #0
 8002e86:	42a6      	cmp	r6, r4
 8002e88:	d105      	bne.n	8002e96 <__libc_init_array+0x2e>
 8002e8a:	bd70      	pop	{r4, r5, r6, pc}
 8002e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e90:	4798      	blx	r3
 8002e92:	3601      	adds	r6, #1
 8002e94:	e7ee      	b.n	8002e74 <__libc_init_array+0xc>
 8002e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e9a:	4798      	blx	r3
 8002e9c:	3601      	adds	r6, #1
 8002e9e:	e7f2      	b.n	8002e86 <__libc_init_array+0x1e>
 8002ea0:	08003824 	.word	0x08003824
 8002ea4:	08003824 	.word	0x08003824
 8002ea8:	08003824 	.word	0x08003824
 8002eac:	08003828 	.word	0x08003828

08002eb0 <memset>:
 8002eb0:	4402      	add	r2, r0
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d100      	bne.n	8002eba <memset+0xa>
 8002eb8:	4770      	bx	lr
 8002eba:	f803 1b01 	strb.w	r1, [r3], #1
 8002ebe:	e7f9      	b.n	8002eb4 <memset+0x4>

08002ec0 <siprintf>:
 8002ec0:	b40e      	push	{r1, r2, r3}
 8002ec2:	b500      	push	{lr}
 8002ec4:	b09c      	sub	sp, #112	; 0x70
 8002ec6:	ab1d      	add	r3, sp, #116	; 0x74
 8002ec8:	9002      	str	r0, [sp, #8]
 8002eca:	9006      	str	r0, [sp, #24]
 8002ecc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ed0:	4809      	ldr	r0, [pc, #36]	; (8002ef8 <siprintf+0x38>)
 8002ed2:	9107      	str	r1, [sp, #28]
 8002ed4:	9104      	str	r1, [sp, #16]
 8002ed6:	4909      	ldr	r1, [pc, #36]	; (8002efc <siprintf+0x3c>)
 8002ed8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002edc:	9105      	str	r1, [sp, #20]
 8002ede:	6800      	ldr	r0, [r0, #0]
 8002ee0:	9301      	str	r3, [sp, #4]
 8002ee2:	a902      	add	r1, sp, #8
 8002ee4:	f000 f868 	bl	8002fb8 <_svfiprintf_r>
 8002ee8:	9b02      	ldr	r3, [sp, #8]
 8002eea:	2200      	movs	r2, #0
 8002eec:	701a      	strb	r2, [r3, #0]
 8002eee:	b01c      	add	sp, #112	; 0x70
 8002ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ef4:	b003      	add	sp, #12
 8002ef6:	4770      	bx	lr
 8002ef8:	20000010 	.word	0x20000010
 8002efc:	ffff0208 	.word	0xffff0208

08002f00 <__ssputs_r>:
 8002f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f04:	688e      	ldr	r6, [r1, #8]
 8002f06:	429e      	cmp	r6, r3
 8002f08:	4682      	mov	sl, r0
 8002f0a:	460c      	mov	r4, r1
 8002f0c:	4690      	mov	r8, r2
 8002f0e:	461f      	mov	r7, r3
 8002f10:	d838      	bhi.n	8002f84 <__ssputs_r+0x84>
 8002f12:	898a      	ldrh	r2, [r1, #12]
 8002f14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f18:	d032      	beq.n	8002f80 <__ssputs_r+0x80>
 8002f1a:	6825      	ldr	r5, [r4, #0]
 8002f1c:	6909      	ldr	r1, [r1, #16]
 8002f1e:	eba5 0901 	sub.w	r9, r5, r1
 8002f22:	6965      	ldr	r5, [r4, #20]
 8002f24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	444b      	add	r3, r9
 8002f30:	106d      	asrs	r5, r5, #1
 8002f32:	429d      	cmp	r5, r3
 8002f34:	bf38      	it	cc
 8002f36:	461d      	movcc	r5, r3
 8002f38:	0553      	lsls	r3, r2, #21
 8002f3a:	d531      	bpl.n	8002fa0 <__ssputs_r+0xa0>
 8002f3c:	4629      	mov	r1, r5
 8002f3e:	f000 fb63 	bl	8003608 <_malloc_r>
 8002f42:	4606      	mov	r6, r0
 8002f44:	b950      	cbnz	r0, 8002f5c <__ssputs_r+0x5c>
 8002f46:	230c      	movs	r3, #12
 8002f48:	f8ca 3000 	str.w	r3, [sl]
 8002f4c:	89a3      	ldrh	r3, [r4, #12]
 8002f4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f52:	81a3      	strh	r3, [r4, #12]
 8002f54:	f04f 30ff 	mov.w	r0, #4294967295
 8002f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f5c:	6921      	ldr	r1, [r4, #16]
 8002f5e:	464a      	mov	r2, r9
 8002f60:	f000 fabe 	bl	80034e0 <memcpy>
 8002f64:	89a3      	ldrh	r3, [r4, #12]
 8002f66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f6e:	81a3      	strh	r3, [r4, #12]
 8002f70:	6126      	str	r6, [r4, #16]
 8002f72:	6165      	str	r5, [r4, #20]
 8002f74:	444e      	add	r6, r9
 8002f76:	eba5 0509 	sub.w	r5, r5, r9
 8002f7a:	6026      	str	r6, [r4, #0]
 8002f7c:	60a5      	str	r5, [r4, #8]
 8002f7e:	463e      	mov	r6, r7
 8002f80:	42be      	cmp	r6, r7
 8002f82:	d900      	bls.n	8002f86 <__ssputs_r+0x86>
 8002f84:	463e      	mov	r6, r7
 8002f86:	6820      	ldr	r0, [r4, #0]
 8002f88:	4632      	mov	r2, r6
 8002f8a:	4641      	mov	r1, r8
 8002f8c:	f000 fab6 	bl	80034fc <memmove>
 8002f90:	68a3      	ldr	r3, [r4, #8]
 8002f92:	1b9b      	subs	r3, r3, r6
 8002f94:	60a3      	str	r3, [r4, #8]
 8002f96:	6823      	ldr	r3, [r4, #0]
 8002f98:	4433      	add	r3, r6
 8002f9a:	6023      	str	r3, [r4, #0]
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	e7db      	b.n	8002f58 <__ssputs_r+0x58>
 8002fa0:	462a      	mov	r2, r5
 8002fa2:	f000 fba5 	bl	80036f0 <_realloc_r>
 8002fa6:	4606      	mov	r6, r0
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	d1e1      	bne.n	8002f70 <__ssputs_r+0x70>
 8002fac:	6921      	ldr	r1, [r4, #16]
 8002fae:	4650      	mov	r0, sl
 8002fb0:	f000 fabe 	bl	8003530 <_free_r>
 8002fb4:	e7c7      	b.n	8002f46 <__ssputs_r+0x46>
	...

08002fb8 <_svfiprintf_r>:
 8002fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fbc:	4698      	mov	r8, r3
 8002fbe:	898b      	ldrh	r3, [r1, #12]
 8002fc0:	061b      	lsls	r3, r3, #24
 8002fc2:	b09d      	sub	sp, #116	; 0x74
 8002fc4:	4607      	mov	r7, r0
 8002fc6:	460d      	mov	r5, r1
 8002fc8:	4614      	mov	r4, r2
 8002fca:	d50e      	bpl.n	8002fea <_svfiprintf_r+0x32>
 8002fcc:	690b      	ldr	r3, [r1, #16]
 8002fce:	b963      	cbnz	r3, 8002fea <_svfiprintf_r+0x32>
 8002fd0:	2140      	movs	r1, #64	; 0x40
 8002fd2:	f000 fb19 	bl	8003608 <_malloc_r>
 8002fd6:	6028      	str	r0, [r5, #0]
 8002fd8:	6128      	str	r0, [r5, #16]
 8002fda:	b920      	cbnz	r0, 8002fe6 <_svfiprintf_r+0x2e>
 8002fdc:	230c      	movs	r3, #12
 8002fde:	603b      	str	r3, [r7, #0]
 8002fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe4:	e0d1      	b.n	800318a <_svfiprintf_r+0x1d2>
 8002fe6:	2340      	movs	r3, #64	; 0x40
 8002fe8:	616b      	str	r3, [r5, #20]
 8002fea:	2300      	movs	r3, #0
 8002fec:	9309      	str	r3, [sp, #36]	; 0x24
 8002fee:	2320      	movs	r3, #32
 8002ff0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ff4:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ff8:	2330      	movs	r3, #48	; 0x30
 8002ffa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80031a4 <_svfiprintf_r+0x1ec>
 8002ffe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003002:	f04f 0901 	mov.w	r9, #1
 8003006:	4623      	mov	r3, r4
 8003008:	469a      	mov	sl, r3
 800300a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800300e:	b10a      	cbz	r2, 8003014 <_svfiprintf_r+0x5c>
 8003010:	2a25      	cmp	r2, #37	; 0x25
 8003012:	d1f9      	bne.n	8003008 <_svfiprintf_r+0x50>
 8003014:	ebba 0b04 	subs.w	fp, sl, r4
 8003018:	d00b      	beq.n	8003032 <_svfiprintf_r+0x7a>
 800301a:	465b      	mov	r3, fp
 800301c:	4622      	mov	r2, r4
 800301e:	4629      	mov	r1, r5
 8003020:	4638      	mov	r0, r7
 8003022:	f7ff ff6d 	bl	8002f00 <__ssputs_r>
 8003026:	3001      	adds	r0, #1
 8003028:	f000 80aa 	beq.w	8003180 <_svfiprintf_r+0x1c8>
 800302c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800302e:	445a      	add	r2, fp
 8003030:	9209      	str	r2, [sp, #36]	; 0x24
 8003032:	f89a 3000 	ldrb.w	r3, [sl]
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 80a2 	beq.w	8003180 <_svfiprintf_r+0x1c8>
 800303c:	2300      	movs	r3, #0
 800303e:	f04f 32ff 	mov.w	r2, #4294967295
 8003042:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003046:	f10a 0a01 	add.w	sl, sl, #1
 800304a:	9304      	str	r3, [sp, #16]
 800304c:	9307      	str	r3, [sp, #28]
 800304e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003052:	931a      	str	r3, [sp, #104]	; 0x68
 8003054:	4654      	mov	r4, sl
 8003056:	2205      	movs	r2, #5
 8003058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800305c:	4851      	ldr	r0, [pc, #324]	; (80031a4 <_svfiprintf_r+0x1ec>)
 800305e:	f7fd f8d7 	bl	8000210 <memchr>
 8003062:	9a04      	ldr	r2, [sp, #16]
 8003064:	b9d8      	cbnz	r0, 800309e <_svfiprintf_r+0xe6>
 8003066:	06d0      	lsls	r0, r2, #27
 8003068:	bf44      	itt	mi
 800306a:	2320      	movmi	r3, #32
 800306c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003070:	0711      	lsls	r1, r2, #28
 8003072:	bf44      	itt	mi
 8003074:	232b      	movmi	r3, #43	; 0x2b
 8003076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800307a:	f89a 3000 	ldrb.w	r3, [sl]
 800307e:	2b2a      	cmp	r3, #42	; 0x2a
 8003080:	d015      	beq.n	80030ae <_svfiprintf_r+0xf6>
 8003082:	9a07      	ldr	r2, [sp, #28]
 8003084:	4654      	mov	r4, sl
 8003086:	2000      	movs	r0, #0
 8003088:	f04f 0c0a 	mov.w	ip, #10
 800308c:	4621      	mov	r1, r4
 800308e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003092:	3b30      	subs	r3, #48	; 0x30
 8003094:	2b09      	cmp	r3, #9
 8003096:	d94e      	bls.n	8003136 <_svfiprintf_r+0x17e>
 8003098:	b1b0      	cbz	r0, 80030c8 <_svfiprintf_r+0x110>
 800309a:	9207      	str	r2, [sp, #28]
 800309c:	e014      	b.n	80030c8 <_svfiprintf_r+0x110>
 800309e:	eba0 0308 	sub.w	r3, r0, r8
 80030a2:	fa09 f303 	lsl.w	r3, r9, r3
 80030a6:	4313      	orrs	r3, r2
 80030a8:	9304      	str	r3, [sp, #16]
 80030aa:	46a2      	mov	sl, r4
 80030ac:	e7d2      	b.n	8003054 <_svfiprintf_r+0x9c>
 80030ae:	9b03      	ldr	r3, [sp, #12]
 80030b0:	1d19      	adds	r1, r3, #4
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	9103      	str	r1, [sp, #12]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	bfbb      	ittet	lt
 80030ba:	425b      	neglt	r3, r3
 80030bc:	f042 0202 	orrlt.w	r2, r2, #2
 80030c0:	9307      	strge	r3, [sp, #28]
 80030c2:	9307      	strlt	r3, [sp, #28]
 80030c4:	bfb8      	it	lt
 80030c6:	9204      	strlt	r2, [sp, #16]
 80030c8:	7823      	ldrb	r3, [r4, #0]
 80030ca:	2b2e      	cmp	r3, #46	; 0x2e
 80030cc:	d10c      	bne.n	80030e8 <_svfiprintf_r+0x130>
 80030ce:	7863      	ldrb	r3, [r4, #1]
 80030d0:	2b2a      	cmp	r3, #42	; 0x2a
 80030d2:	d135      	bne.n	8003140 <_svfiprintf_r+0x188>
 80030d4:	9b03      	ldr	r3, [sp, #12]
 80030d6:	1d1a      	adds	r2, r3, #4
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	9203      	str	r2, [sp, #12]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	bfb8      	it	lt
 80030e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80030e4:	3402      	adds	r4, #2
 80030e6:	9305      	str	r3, [sp, #20]
 80030e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80031b4 <_svfiprintf_r+0x1fc>
 80030ec:	7821      	ldrb	r1, [r4, #0]
 80030ee:	2203      	movs	r2, #3
 80030f0:	4650      	mov	r0, sl
 80030f2:	f7fd f88d 	bl	8000210 <memchr>
 80030f6:	b140      	cbz	r0, 800310a <_svfiprintf_r+0x152>
 80030f8:	2340      	movs	r3, #64	; 0x40
 80030fa:	eba0 000a 	sub.w	r0, r0, sl
 80030fe:	fa03 f000 	lsl.w	r0, r3, r0
 8003102:	9b04      	ldr	r3, [sp, #16]
 8003104:	4303      	orrs	r3, r0
 8003106:	3401      	adds	r4, #1
 8003108:	9304      	str	r3, [sp, #16]
 800310a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800310e:	4826      	ldr	r0, [pc, #152]	; (80031a8 <_svfiprintf_r+0x1f0>)
 8003110:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003114:	2206      	movs	r2, #6
 8003116:	f7fd f87b 	bl	8000210 <memchr>
 800311a:	2800      	cmp	r0, #0
 800311c:	d038      	beq.n	8003190 <_svfiprintf_r+0x1d8>
 800311e:	4b23      	ldr	r3, [pc, #140]	; (80031ac <_svfiprintf_r+0x1f4>)
 8003120:	bb1b      	cbnz	r3, 800316a <_svfiprintf_r+0x1b2>
 8003122:	9b03      	ldr	r3, [sp, #12]
 8003124:	3307      	adds	r3, #7
 8003126:	f023 0307 	bic.w	r3, r3, #7
 800312a:	3308      	adds	r3, #8
 800312c:	9303      	str	r3, [sp, #12]
 800312e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003130:	4433      	add	r3, r6
 8003132:	9309      	str	r3, [sp, #36]	; 0x24
 8003134:	e767      	b.n	8003006 <_svfiprintf_r+0x4e>
 8003136:	fb0c 3202 	mla	r2, ip, r2, r3
 800313a:	460c      	mov	r4, r1
 800313c:	2001      	movs	r0, #1
 800313e:	e7a5      	b.n	800308c <_svfiprintf_r+0xd4>
 8003140:	2300      	movs	r3, #0
 8003142:	3401      	adds	r4, #1
 8003144:	9305      	str	r3, [sp, #20]
 8003146:	4619      	mov	r1, r3
 8003148:	f04f 0c0a 	mov.w	ip, #10
 800314c:	4620      	mov	r0, r4
 800314e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003152:	3a30      	subs	r2, #48	; 0x30
 8003154:	2a09      	cmp	r2, #9
 8003156:	d903      	bls.n	8003160 <_svfiprintf_r+0x1a8>
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0c5      	beq.n	80030e8 <_svfiprintf_r+0x130>
 800315c:	9105      	str	r1, [sp, #20]
 800315e:	e7c3      	b.n	80030e8 <_svfiprintf_r+0x130>
 8003160:	fb0c 2101 	mla	r1, ip, r1, r2
 8003164:	4604      	mov	r4, r0
 8003166:	2301      	movs	r3, #1
 8003168:	e7f0      	b.n	800314c <_svfiprintf_r+0x194>
 800316a:	ab03      	add	r3, sp, #12
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	462a      	mov	r2, r5
 8003170:	4b0f      	ldr	r3, [pc, #60]	; (80031b0 <_svfiprintf_r+0x1f8>)
 8003172:	a904      	add	r1, sp, #16
 8003174:	4638      	mov	r0, r7
 8003176:	f3af 8000 	nop.w
 800317a:	1c42      	adds	r2, r0, #1
 800317c:	4606      	mov	r6, r0
 800317e:	d1d6      	bne.n	800312e <_svfiprintf_r+0x176>
 8003180:	89ab      	ldrh	r3, [r5, #12]
 8003182:	065b      	lsls	r3, r3, #25
 8003184:	f53f af2c 	bmi.w	8002fe0 <_svfiprintf_r+0x28>
 8003188:	9809      	ldr	r0, [sp, #36]	; 0x24
 800318a:	b01d      	add	sp, #116	; 0x74
 800318c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003190:	ab03      	add	r3, sp, #12
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	462a      	mov	r2, r5
 8003196:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <_svfiprintf_r+0x1f8>)
 8003198:	a904      	add	r1, sp, #16
 800319a:	4638      	mov	r0, r7
 800319c:	f000 f87a 	bl	8003294 <_printf_i>
 80031a0:	e7eb      	b.n	800317a <_svfiprintf_r+0x1c2>
 80031a2:	bf00      	nop
 80031a4:	080037e8 	.word	0x080037e8
 80031a8:	080037f2 	.word	0x080037f2
 80031ac:	00000000 	.word	0x00000000
 80031b0:	08002f01 	.word	0x08002f01
 80031b4:	080037ee 	.word	0x080037ee

080031b8 <_printf_common>:
 80031b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031bc:	4616      	mov	r6, r2
 80031be:	4699      	mov	r9, r3
 80031c0:	688a      	ldr	r2, [r1, #8]
 80031c2:	690b      	ldr	r3, [r1, #16]
 80031c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80031c8:	4293      	cmp	r3, r2
 80031ca:	bfb8      	it	lt
 80031cc:	4613      	movlt	r3, r2
 80031ce:	6033      	str	r3, [r6, #0]
 80031d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031d4:	4607      	mov	r7, r0
 80031d6:	460c      	mov	r4, r1
 80031d8:	b10a      	cbz	r2, 80031de <_printf_common+0x26>
 80031da:	3301      	adds	r3, #1
 80031dc:	6033      	str	r3, [r6, #0]
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	0699      	lsls	r1, r3, #26
 80031e2:	bf42      	ittt	mi
 80031e4:	6833      	ldrmi	r3, [r6, #0]
 80031e6:	3302      	addmi	r3, #2
 80031e8:	6033      	strmi	r3, [r6, #0]
 80031ea:	6825      	ldr	r5, [r4, #0]
 80031ec:	f015 0506 	ands.w	r5, r5, #6
 80031f0:	d106      	bne.n	8003200 <_printf_common+0x48>
 80031f2:	f104 0a19 	add.w	sl, r4, #25
 80031f6:	68e3      	ldr	r3, [r4, #12]
 80031f8:	6832      	ldr	r2, [r6, #0]
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	42ab      	cmp	r3, r5
 80031fe:	dc26      	bgt.n	800324e <_printf_common+0x96>
 8003200:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003204:	1e13      	subs	r3, r2, #0
 8003206:	6822      	ldr	r2, [r4, #0]
 8003208:	bf18      	it	ne
 800320a:	2301      	movne	r3, #1
 800320c:	0692      	lsls	r2, r2, #26
 800320e:	d42b      	bmi.n	8003268 <_printf_common+0xb0>
 8003210:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003214:	4649      	mov	r1, r9
 8003216:	4638      	mov	r0, r7
 8003218:	47c0      	blx	r8
 800321a:	3001      	adds	r0, #1
 800321c:	d01e      	beq.n	800325c <_printf_common+0xa4>
 800321e:	6823      	ldr	r3, [r4, #0]
 8003220:	68e5      	ldr	r5, [r4, #12]
 8003222:	6832      	ldr	r2, [r6, #0]
 8003224:	f003 0306 	and.w	r3, r3, #6
 8003228:	2b04      	cmp	r3, #4
 800322a:	bf08      	it	eq
 800322c:	1aad      	subeq	r5, r5, r2
 800322e:	68a3      	ldr	r3, [r4, #8]
 8003230:	6922      	ldr	r2, [r4, #16]
 8003232:	bf0c      	ite	eq
 8003234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003238:	2500      	movne	r5, #0
 800323a:	4293      	cmp	r3, r2
 800323c:	bfc4      	itt	gt
 800323e:	1a9b      	subgt	r3, r3, r2
 8003240:	18ed      	addgt	r5, r5, r3
 8003242:	2600      	movs	r6, #0
 8003244:	341a      	adds	r4, #26
 8003246:	42b5      	cmp	r5, r6
 8003248:	d11a      	bne.n	8003280 <_printf_common+0xc8>
 800324a:	2000      	movs	r0, #0
 800324c:	e008      	b.n	8003260 <_printf_common+0xa8>
 800324e:	2301      	movs	r3, #1
 8003250:	4652      	mov	r2, sl
 8003252:	4649      	mov	r1, r9
 8003254:	4638      	mov	r0, r7
 8003256:	47c0      	blx	r8
 8003258:	3001      	adds	r0, #1
 800325a:	d103      	bne.n	8003264 <_printf_common+0xac>
 800325c:	f04f 30ff 	mov.w	r0, #4294967295
 8003260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003264:	3501      	adds	r5, #1
 8003266:	e7c6      	b.n	80031f6 <_printf_common+0x3e>
 8003268:	18e1      	adds	r1, r4, r3
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	2030      	movs	r0, #48	; 0x30
 800326e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003272:	4422      	add	r2, r4
 8003274:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003278:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800327c:	3302      	adds	r3, #2
 800327e:	e7c7      	b.n	8003210 <_printf_common+0x58>
 8003280:	2301      	movs	r3, #1
 8003282:	4622      	mov	r2, r4
 8003284:	4649      	mov	r1, r9
 8003286:	4638      	mov	r0, r7
 8003288:	47c0      	blx	r8
 800328a:	3001      	adds	r0, #1
 800328c:	d0e6      	beq.n	800325c <_printf_common+0xa4>
 800328e:	3601      	adds	r6, #1
 8003290:	e7d9      	b.n	8003246 <_printf_common+0x8e>
	...

08003294 <_printf_i>:
 8003294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003298:	7e0f      	ldrb	r7, [r1, #24]
 800329a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800329c:	2f78      	cmp	r7, #120	; 0x78
 800329e:	4691      	mov	r9, r2
 80032a0:	4680      	mov	r8, r0
 80032a2:	460c      	mov	r4, r1
 80032a4:	469a      	mov	sl, r3
 80032a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80032aa:	d807      	bhi.n	80032bc <_printf_i+0x28>
 80032ac:	2f62      	cmp	r7, #98	; 0x62
 80032ae:	d80a      	bhi.n	80032c6 <_printf_i+0x32>
 80032b0:	2f00      	cmp	r7, #0
 80032b2:	f000 80d8 	beq.w	8003466 <_printf_i+0x1d2>
 80032b6:	2f58      	cmp	r7, #88	; 0x58
 80032b8:	f000 80a3 	beq.w	8003402 <_printf_i+0x16e>
 80032bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80032c4:	e03a      	b.n	800333c <_printf_i+0xa8>
 80032c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80032ca:	2b15      	cmp	r3, #21
 80032cc:	d8f6      	bhi.n	80032bc <_printf_i+0x28>
 80032ce:	a101      	add	r1, pc, #4	; (adr r1, 80032d4 <_printf_i+0x40>)
 80032d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032d4:	0800332d 	.word	0x0800332d
 80032d8:	08003341 	.word	0x08003341
 80032dc:	080032bd 	.word	0x080032bd
 80032e0:	080032bd 	.word	0x080032bd
 80032e4:	080032bd 	.word	0x080032bd
 80032e8:	080032bd 	.word	0x080032bd
 80032ec:	08003341 	.word	0x08003341
 80032f0:	080032bd 	.word	0x080032bd
 80032f4:	080032bd 	.word	0x080032bd
 80032f8:	080032bd 	.word	0x080032bd
 80032fc:	080032bd 	.word	0x080032bd
 8003300:	0800344d 	.word	0x0800344d
 8003304:	08003371 	.word	0x08003371
 8003308:	0800342f 	.word	0x0800342f
 800330c:	080032bd 	.word	0x080032bd
 8003310:	080032bd 	.word	0x080032bd
 8003314:	0800346f 	.word	0x0800346f
 8003318:	080032bd 	.word	0x080032bd
 800331c:	08003371 	.word	0x08003371
 8003320:	080032bd 	.word	0x080032bd
 8003324:	080032bd 	.word	0x080032bd
 8003328:	08003437 	.word	0x08003437
 800332c:	682b      	ldr	r3, [r5, #0]
 800332e:	1d1a      	adds	r2, r3, #4
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	602a      	str	r2, [r5, #0]
 8003334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003338:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800333c:	2301      	movs	r3, #1
 800333e:	e0a3      	b.n	8003488 <_printf_i+0x1f4>
 8003340:	6820      	ldr	r0, [r4, #0]
 8003342:	6829      	ldr	r1, [r5, #0]
 8003344:	0606      	lsls	r6, r0, #24
 8003346:	f101 0304 	add.w	r3, r1, #4
 800334a:	d50a      	bpl.n	8003362 <_printf_i+0xce>
 800334c:	680e      	ldr	r6, [r1, #0]
 800334e:	602b      	str	r3, [r5, #0]
 8003350:	2e00      	cmp	r6, #0
 8003352:	da03      	bge.n	800335c <_printf_i+0xc8>
 8003354:	232d      	movs	r3, #45	; 0x2d
 8003356:	4276      	negs	r6, r6
 8003358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800335c:	485e      	ldr	r0, [pc, #376]	; (80034d8 <_printf_i+0x244>)
 800335e:	230a      	movs	r3, #10
 8003360:	e019      	b.n	8003396 <_printf_i+0x102>
 8003362:	680e      	ldr	r6, [r1, #0]
 8003364:	602b      	str	r3, [r5, #0]
 8003366:	f010 0f40 	tst.w	r0, #64	; 0x40
 800336a:	bf18      	it	ne
 800336c:	b236      	sxthne	r6, r6
 800336e:	e7ef      	b.n	8003350 <_printf_i+0xbc>
 8003370:	682b      	ldr	r3, [r5, #0]
 8003372:	6820      	ldr	r0, [r4, #0]
 8003374:	1d19      	adds	r1, r3, #4
 8003376:	6029      	str	r1, [r5, #0]
 8003378:	0601      	lsls	r1, r0, #24
 800337a:	d501      	bpl.n	8003380 <_printf_i+0xec>
 800337c:	681e      	ldr	r6, [r3, #0]
 800337e:	e002      	b.n	8003386 <_printf_i+0xf2>
 8003380:	0646      	lsls	r6, r0, #25
 8003382:	d5fb      	bpl.n	800337c <_printf_i+0xe8>
 8003384:	881e      	ldrh	r6, [r3, #0]
 8003386:	4854      	ldr	r0, [pc, #336]	; (80034d8 <_printf_i+0x244>)
 8003388:	2f6f      	cmp	r7, #111	; 0x6f
 800338a:	bf0c      	ite	eq
 800338c:	2308      	moveq	r3, #8
 800338e:	230a      	movne	r3, #10
 8003390:	2100      	movs	r1, #0
 8003392:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003396:	6865      	ldr	r5, [r4, #4]
 8003398:	60a5      	str	r5, [r4, #8]
 800339a:	2d00      	cmp	r5, #0
 800339c:	bfa2      	ittt	ge
 800339e:	6821      	ldrge	r1, [r4, #0]
 80033a0:	f021 0104 	bicge.w	r1, r1, #4
 80033a4:	6021      	strge	r1, [r4, #0]
 80033a6:	b90e      	cbnz	r6, 80033ac <_printf_i+0x118>
 80033a8:	2d00      	cmp	r5, #0
 80033aa:	d04d      	beq.n	8003448 <_printf_i+0x1b4>
 80033ac:	4615      	mov	r5, r2
 80033ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80033b2:	fb03 6711 	mls	r7, r3, r1, r6
 80033b6:	5dc7      	ldrb	r7, [r0, r7]
 80033b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80033bc:	4637      	mov	r7, r6
 80033be:	42bb      	cmp	r3, r7
 80033c0:	460e      	mov	r6, r1
 80033c2:	d9f4      	bls.n	80033ae <_printf_i+0x11a>
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d10b      	bne.n	80033e0 <_printf_i+0x14c>
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	07de      	lsls	r6, r3, #31
 80033cc:	d508      	bpl.n	80033e0 <_printf_i+0x14c>
 80033ce:	6923      	ldr	r3, [r4, #16]
 80033d0:	6861      	ldr	r1, [r4, #4]
 80033d2:	4299      	cmp	r1, r3
 80033d4:	bfde      	ittt	le
 80033d6:	2330      	movle	r3, #48	; 0x30
 80033d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80033e0:	1b52      	subs	r2, r2, r5
 80033e2:	6122      	str	r2, [r4, #16]
 80033e4:	f8cd a000 	str.w	sl, [sp]
 80033e8:	464b      	mov	r3, r9
 80033ea:	aa03      	add	r2, sp, #12
 80033ec:	4621      	mov	r1, r4
 80033ee:	4640      	mov	r0, r8
 80033f0:	f7ff fee2 	bl	80031b8 <_printf_common>
 80033f4:	3001      	adds	r0, #1
 80033f6:	d14c      	bne.n	8003492 <_printf_i+0x1fe>
 80033f8:	f04f 30ff 	mov.w	r0, #4294967295
 80033fc:	b004      	add	sp, #16
 80033fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003402:	4835      	ldr	r0, [pc, #212]	; (80034d8 <_printf_i+0x244>)
 8003404:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003408:	6829      	ldr	r1, [r5, #0]
 800340a:	6823      	ldr	r3, [r4, #0]
 800340c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003410:	6029      	str	r1, [r5, #0]
 8003412:	061d      	lsls	r5, r3, #24
 8003414:	d514      	bpl.n	8003440 <_printf_i+0x1ac>
 8003416:	07df      	lsls	r7, r3, #31
 8003418:	bf44      	itt	mi
 800341a:	f043 0320 	orrmi.w	r3, r3, #32
 800341e:	6023      	strmi	r3, [r4, #0]
 8003420:	b91e      	cbnz	r6, 800342a <_printf_i+0x196>
 8003422:	6823      	ldr	r3, [r4, #0]
 8003424:	f023 0320 	bic.w	r3, r3, #32
 8003428:	6023      	str	r3, [r4, #0]
 800342a:	2310      	movs	r3, #16
 800342c:	e7b0      	b.n	8003390 <_printf_i+0xfc>
 800342e:	6823      	ldr	r3, [r4, #0]
 8003430:	f043 0320 	orr.w	r3, r3, #32
 8003434:	6023      	str	r3, [r4, #0]
 8003436:	2378      	movs	r3, #120	; 0x78
 8003438:	4828      	ldr	r0, [pc, #160]	; (80034dc <_printf_i+0x248>)
 800343a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800343e:	e7e3      	b.n	8003408 <_printf_i+0x174>
 8003440:	0659      	lsls	r1, r3, #25
 8003442:	bf48      	it	mi
 8003444:	b2b6      	uxthmi	r6, r6
 8003446:	e7e6      	b.n	8003416 <_printf_i+0x182>
 8003448:	4615      	mov	r5, r2
 800344a:	e7bb      	b.n	80033c4 <_printf_i+0x130>
 800344c:	682b      	ldr	r3, [r5, #0]
 800344e:	6826      	ldr	r6, [r4, #0]
 8003450:	6961      	ldr	r1, [r4, #20]
 8003452:	1d18      	adds	r0, r3, #4
 8003454:	6028      	str	r0, [r5, #0]
 8003456:	0635      	lsls	r5, r6, #24
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	d501      	bpl.n	8003460 <_printf_i+0x1cc>
 800345c:	6019      	str	r1, [r3, #0]
 800345e:	e002      	b.n	8003466 <_printf_i+0x1d2>
 8003460:	0670      	lsls	r0, r6, #25
 8003462:	d5fb      	bpl.n	800345c <_printf_i+0x1c8>
 8003464:	8019      	strh	r1, [r3, #0]
 8003466:	2300      	movs	r3, #0
 8003468:	6123      	str	r3, [r4, #16]
 800346a:	4615      	mov	r5, r2
 800346c:	e7ba      	b.n	80033e4 <_printf_i+0x150>
 800346e:	682b      	ldr	r3, [r5, #0]
 8003470:	1d1a      	adds	r2, r3, #4
 8003472:	602a      	str	r2, [r5, #0]
 8003474:	681d      	ldr	r5, [r3, #0]
 8003476:	6862      	ldr	r2, [r4, #4]
 8003478:	2100      	movs	r1, #0
 800347a:	4628      	mov	r0, r5
 800347c:	f7fc fec8 	bl	8000210 <memchr>
 8003480:	b108      	cbz	r0, 8003486 <_printf_i+0x1f2>
 8003482:	1b40      	subs	r0, r0, r5
 8003484:	6060      	str	r0, [r4, #4]
 8003486:	6863      	ldr	r3, [r4, #4]
 8003488:	6123      	str	r3, [r4, #16]
 800348a:	2300      	movs	r3, #0
 800348c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003490:	e7a8      	b.n	80033e4 <_printf_i+0x150>
 8003492:	6923      	ldr	r3, [r4, #16]
 8003494:	462a      	mov	r2, r5
 8003496:	4649      	mov	r1, r9
 8003498:	4640      	mov	r0, r8
 800349a:	47d0      	blx	sl
 800349c:	3001      	adds	r0, #1
 800349e:	d0ab      	beq.n	80033f8 <_printf_i+0x164>
 80034a0:	6823      	ldr	r3, [r4, #0]
 80034a2:	079b      	lsls	r3, r3, #30
 80034a4:	d413      	bmi.n	80034ce <_printf_i+0x23a>
 80034a6:	68e0      	ldr	r0, [r4, #12]
 80034a8:	9b03      	ldr	r3, [sp, #12]
 80034aa:	4298      	cmp	r0, r3
 80034ac:	bfb8      	it	lt
 80034ae:	4618      	movlt	r0, r3
 80034b0:	e7a4      	b.n	80033fc <_printf_i+0x168>
 80034b2:	2301      	movs	r3, #1
 80034b4:	4632      	mov	r2, r6
 80034b6:	4649      	mov	r1, r9
 80034b8:	4640      	mov	r0, r8
 80034ba:	47d0      	blx	sl
 80034bc:	3001      	adds	r0, #1
 80034be:	d09b      	beq.n	80033f8 <_printf_i+0x164>
 80034c0:	3501      	adds	r5, #1
 80034c2:	68e3      	ldr	r3, [r4, #12]
 80034c4:	9903      	ldr	r1, [sp, #12]
 80034c6:	1a5b      	subs	r3, r3, r1
 80034c8:	42ab      	cmp	r3, r5
 80034ca:	dcf2      	bgt.n	80034b2 <_printf_i+0x21e>
 80034cc:	e7eb      	b.n	80034a6 <_printf_i+0x212>
 80034ce:	2500      	movs	r5, #0
 80034d0:	f104 0619 	add.w	r6, r4, #25
 80034d4:	e7f5      	b.n	80034c2 <_printf_i+0x22e>
 80034d6:	bf00      	nop
 80034d8:	080037f9 	.word	0x080037f9
 80034dc:	0800380a 	.word	0x0800380a

080034e0 <memcpy>:
 80034e0:	440a      	add	r2, r1
 80034e2:	4291      	cmp	r1, r2
 80034e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80034e8:	d100      	bne.n	80034ec <memcpy+0xc>
 80034ea:	4770      	bx	lr
 80034ec:	b510      	push	{r4, lr}
 80034ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034f6:	4291      	cmp	r1, r2
 80034f8:	d1f9      	bne.n	80034ee <memcpy+0xe>
 80034fa:	bd10      	pop	{r4, pc}

080034fc <memmove>:
 80034fc:	4288      	cmp	r0, r1
 80034fe:	b510      	push	{r4, lr}
 8003500:	eb01 0402 	add.w	r4, r1, r2
 8003504:	d902      	bls.n	800350c <memmove+0x10>
 8003506:	4284      	cmp	r4, r0
 8003508:	4623      	mov	r3, r4
 800350a:	d807      	bhi.n	800351c <memmove+0x20>
 800350c:	1e43      	subs	r3, r0, #1
 800350e:	42a1      	cmp	r1, r4
 8003510:	d008      	beq.n	8003524 <memmove+0x28>
 8003512:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003516:	f803 2f01 	strb.w	r2, [r3, #1]!
 800351a:	e7f8      	b.n	800350e <memmove+0x12>
 800351c:	4402      	add	r2, r0
 800351e:	4601      	mov	r1, r0
 8003520:	428a      	cmp	r2, r1
 8003522:	d100      	bne.n	8003526 <memmove+0x2a>
 8003524:	bd10      	pop	{r4, pc}
 8003526:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800352a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800352e:	e7f7      	b.n	8003520 <memmove+0x24>

08003530 <_free_r>:
 8003530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003532:	2900      	cmp	r1, #0
 8003534:	d044      	beq.n	80035c0 <_free_r+0x90>
 8003536:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800353a:	9001      	str	r0, [sp, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	f1a1 0404 	sub.w	r4, r1, #4
 8003542:	bfb8      	it	lt
 8003544:	18e4      	addlt	r4, r4, r3
 8003546:	f000 f913 	bl	8003770 <__malloc_lock>
 800354a:	4a1e      	ldr	r2, [pc, #120]	; (80035c4 <_free_r+0x94>)
 800354c:	9801      	ldr	r0, [sp, #4]
 800354e:	6813      	ldr	r3, [r2, #0]
 8003550:	b933      	cbnz	r3, 8003560 <_free_r+0x30>
 8003552:	6063      	str	r3, [r4, #4]
 8003554:	6014      	str	r4, [r2, #0]
 8003556:	b003      	add	sp, #12
 8003558:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800355c:	f000 b90e 	b.w	800377c <__malloc_unlock>
 8003560:	42a3      	cmp	r3, r4
 8003562:	d908      	bls.n	8003576 <_free_r+0x46>
 8003564:	6825      	ldr	r5, [r4, #0]
 8003566:	1961      	adds	r1, r4, r5
 8003568:	428b      	cmp	r3, r1
 800356a:	bf01      	itttt	eq
 800356c:	6819      	ldreq	r1, [r3, #0]
 800356e:	685b      	ldreq	r3, [r3, #4]
 8003570:	1949      	addeq	r1, r1, r5
 8003572:	6021      	streq	r1, [r4, #0]
 8003574:	e7ed      	b.n	8003552 <_free_r+0x22>
 8003576:	461a      	mov	r2, r3
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	b10b      	cbz	r3, 8003580 <_free_r+0x50>
 800357c:	42a3      	cmp	r3, r4
 800357e:	d9fa      	bls.n	8003576 <_free_r+0x46>
 8003580:	6811      	ldr	r1, [r2, #0]
 8003582:	1855      	adds	r5, r2, r1
 8003584:	42a5      	cmp	r5, r4
 8003586:	d10b      	bne.n	80035a0 <_free_r+0x70>
 8003588:	6824      	ldr	r4, [r4, #0]
 800358a:	4421      	add	r1, r4
 800358c:	1854      	adds	r4, r2, r1
 800358e:	42a3      	cmp	r3, r4
 8003590:	6011      	str	r1, [r2, #0]
 8003592:	d1e0      	bne.n	8003556 <_free_r+0x26>
 8003594:	681c      	ldr	r4, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	6053      	str	r3, [r2, #4]
 800359a:	4421      	add	r1, r4
 800359c:	6011      	str	r1, [r2, #0]
 800359e:	e7da      	b.n	8003556 <_free_r+0x26>
 80035a0:	d902      	bls.n	80035a8 <_free_r+0x78>
 80035a2:	230c      	movs	r3, #12
 80035a4:	6003      	str	r3, [r0, #0]
 80035a6:	e7d6      	b.n	8003556 <_free_r+0x26>
 80035a8:	6825      	ldr	r5, [r4, #0]
 80035aa:	1961      	adds	r1, r4, r5
 80035ac:	428b      	cmp	r3, r1
 80035ae:	bf04      	itt	eq
 80035b0:	6819      	ldreq	r1, [r3, #0]
 80035b2:	685b      	ldreq	r3, [r3, #4]
 80035b4:	6063      	str	r3, [r4, #4]
 80035b6:	bf04      	itt	eq
 80035b8:	1949      	addeq	r1, r1, r5
 80035ba:	6021      	streq	r1, [r4, #0]
 80035bc:	6054      	str	r4, [r2, #4]
 80035be:	e7ca      	b.n	8003556 <_free_r+0x26>
 80035c0:	b003      	add	sp, #12
 80035c2:	bd30      	pop	{r4, r5, pc}
 80035c4:	20000130 	.word	0x20000130

080035c8 <sbrk_aligned>:
 80035c8:	b570      	push	{r4, r5, r6, lr}
 80035ca:	4e0e      	ldr	r6, [pc, #56]	; (8003604 <sbrk_aligned+0x3c>)
 80035cc:	460c      	mov	r4, r1
 80035ce:	6831      	ldr	r1, [r6, #0]
 80035d0:	4605      	mov	r5, r0
 80035d2:	b911      	cbnz	r1, 80035da <sbrk_aligned+0x12>
 80035d4:	f000 f8bc 	bl	8003750 <_sbrk_r>
 80035d8:	6030      	str	r0, [r6, #0]
 80035da:	4621      	mov	r1, r4
 80035dc:	4628      	mov	r0, r5
 80035de:	f000 f8b7 	bl	8003750 <_sbrk_r>
 80035e2:	1c43      	adds	r3, r0, #1
 80035e4:	d00a      	beq.n	80035fc <sbrk_aligned+0x34>
 80035e6:	1cc4      	adds	r4, r0, #3
 80035e8:	f024 0403 	bic.w	r4, r4, #3
 80035ec:	42a0      	cmp	r0, r4
 80035ee:	d007      	beq.n	8003600 <sbrk_aligned+0x38>
 80035f0:	1a21      	subs	r1, r4, r0
 80035f2:	4628      	mov	r0, r5
 80035f4:	f000 f8ac 	bl	8003750 <_sbrk_r>
 80035f8:	3001      	adds	r0, #1
 80035fa:	d101      	bne.n	8003600 <sbrk_aligned+0x38>
 80035fc:	f04f 34ff 	mov.w	r4, #4294967295
 8003600:	4620      	mov	r0, r4
 8003602:	bd70      	pop	{r4, r5, r6, pc}
 8003604:	20000134 	.word	0x20000134

08003608 <_malloc_r>:
 8003608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800360c:	1ccd      	adds	r5, r1, #3
 800360e:	f025 0503 	bic.w	r5, r5, #3
 8003612:	3508      	adds	r5, #8
 8003614:	2d0c      	cmp	r5, #12
 8003616:	bf38      	it	cc
 8003618:	250c      	movcc	r5, #12
 800361a:	2d00      	cmp	r5, #0
 800361c:	4607      	mov	r7, r0
 800361e:	db01      	blt.n	8003624 <_malloc_r+0x1c>
 8003620:	42a9      	cmp	r1, r5
 8003622:	d905      	bls.n	8003630 <_malloc_r+0x28>
 8003624:	230c      	movs	r3, #12
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	2600      	movs	r6, #0
 800362a:	4630      	mov	r0, r6
 800362c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003630:	4e2e      	ldr	r6, [pc, #184]	; (80036ec <_malloc_r+0xe4>)
 8003632:	f000 f89d 	bl	8003770 <__malloc_lock>
 8003636:	6833      	ldr	r3, [r6, #0]
 8003638:	461c      	mov	r4, r3
 800363a:	bb34      	cbnz	r4, 800368a <_malloc_r+0x82>
 800363c:	4629      	mov	r1, r5
 800363e:	4638      	mov	r0, r7
 8003640:	f7ff ffc2 	bl	80035c8 <sbrk_aligned>
 8003644:	1c43      	adds	r3, r0, #1
 8003646:	4604      	mov	r4, r0
 8003648:	d14d      	bne.n	80036e6 <_malloc_r+0xde>
 800364a:	6834      	ldr	r4, [r6, #0]
 800364c:	4626      	mov	r6, r4
 800364e:	2e00      	cmp	r6, #0
 8003650:	d140      	bne.n	80036d4 <_malloc_r+0xcc>
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	4631      	mov	r1, r6
 8003656:	4638      	mov	r0, r7
 8003658:	eb04 0803 	add.w	r8, r4, r3
 800365c:	f000 f878 	bl	8003750 <_sbrk_r>
 8003660:	4580      	cmp	r8, r0
 8003662:	d13a      	bne.n	80036da <_malloc_r+0xd2>
 8003664:	6821      	ldr	r1, [r4, #0]
 8003666:	3503      	adds	r5, #3
 8003668:	1a6d      	subs	r5, r5, r1
 800366a:	f025 0503 	bic.w	r5, r5, #3
 800366e:	3508      	adds	r5, #8
 8003670:	2d0c      	cmp	r5, #12
 8003672:	bf38      	it	cc
 8003674:	250c      	movcc	r5, #12
 8003676:	4629      	mov	r1, r5
 8003678:	4638      	mov	r0, r7
 800367a:	f7ff ffa5 	bl	80035c8 <sbrk_aligned>
 800367e:	3001      	adds	r0, #1
 8003680:	d02b      	beq.n	80036da <_malloc_r+0xd2>
 8003682:	6823      	ldr	r3, [r4, #0]
 8003684:	442b      	add	r3, r5
 8003686:	6023      	str	r3, [r4, #0]
 8003688:	e00e      	b.n	80036a8 <_malloc_r+0xa0>
 800368a:	6822      	ldr	r2, [r4, #0]
 800368c:	1b52      	subs	r2, r2, r5
 800368e:	d41e      	bmi.n	80036ce <_malloc_r+0xc6>
 8003690:	2a0b      	cmp	r2, #11
 8003692:	d916      	bls.n	80036c2 <_malloc_r+0xba>
 8003694:	1961      	adds	r1, r4, r5
 8003696:	42a3      	cmp	r3, r4
 8003698:	6025      	str	r5, [r4, #0]
 800369a:	bf18      	it	ne
 800369c:	6059      	strne	r1, [r3, #4]
 800369e:	6863      	ldr	r3, [r4, #4]
 80036a0:	bf08      	it	eq
 80036a2:	6031      	streq	r1, [r6, #0]
 80036a4:	5162      	str	r2, [r4, r5]
 80036a6:	604b      	str	r3, [r1, #4]
 80036a8:	4638      	mov	r0, r7
 80036aa:	f104 060b 	add.w	r6, r4, #11
 80036ae:	f000 f865 	bl	800377c <__malloc_unlock>
 80036b2:	f026 0607 	bic.w	r6, r6, #7
 80036b6:	1d23      	adds	r3, r4, #4
 80036b8:	1af2      	subs	r2, r6, r3
 80036ba:	d0b6      	beq.n	800362a <_malloc_r+0x22>
 80036bc:	1b9b      	subs	r3, r3, r6
 80036be:	50a3      	str	r3, [r4, r2]
 80036c0:	e7b3      	b.n	800362a <_malloc_r+0x22>
 80036c2:	6862      	ldr	r2, [r4, #4]
 80036c4:	42a3      	cmp	r3, r4
 80036c6:	bf0c      	ite	eq
 80036c8:	6032      	streq	r2, [r6, #0]
 80036ca:	605a      	strne	r2, [r3, #4]
 80036cc:	e7ec      	b.n	80036a8 <_malloc_r+0xa0>
 80036ce:	4623      	mov	r3, r4
 80036d0:	6864      	ldr	r4, [r4, #4]
 80036d2:	e7b2      	b.n	800363a <_malloc_r+0x32>
 80036d4:	4634      	mov	r4, r6
 80036d6:	6876      	ldr	r6, [r6, #4]
 80036d8:	e7b9      	b.n	800364e <_malloc_r+0x46>
 80036da:	230c      	movs	r3, #12
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	4638      	mov	r0, r7
 80036e0:	f000 f84c 	bl	800377c <__malloc_unlock>
 80036e4:	e7a1      	b.n	800362a <_malloc_r+0x22>
 80036e6:	6025      	str	r5, [r4, #0]
 80036e8:	e7de      	b.n	80036a8 <_malloc_r+0xa0>
 80036ea:	bf00      	nop
 80036ec:	20000130 	.word	0x20000130

080036f0 <_realloc_r>:
 80036f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036f4:	4680      	mov	r8, r0
 80036f6:	4614      	mov	r4, r2
 80036f8:	460e      	mov	r6, r1
 80036fa:	b921      	cbnz	r1, 8003706 <_realloc_r+0x16>
 80036fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003700:	4611      	mov	r1, r2
 8003702:	f7ff bf81 	b.w	8003608 <_malloc_r>
 8003706:	b92a      	cbnz	r2, 8003714 <_realloc_r+0x24>
 8003708:	f7ff ff12 	bl	8003530 <_free_r>
 800370c:	4625      	mov	r5, r4
 800370e:	4628      	mov	r0, r5
 8003710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003714:	f000 f838 	bl	8003788 <_malloc_usable_size_r>
 8003718:	4284      	cmp	r4, r0
 800371a:	4607      	mov	r7, r0
 800371c:	d802      	bhi.n	8003724 <_realloc_r+0x34>
 800371e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003722:	d812      	bhi.n	800374a <_realloc_r+0x5a>
 8003724:	4621      	mov	r1, r4
 8003726:	4640      	mov	r0, r8
 8003728:	f7ff ff6e 	bl	8003608 <_malloc_r>
 800372c:	4605      	mov	r5, r0
 800372e:	2800      	cmp	r0, #0
 8003730:	d0ed      	beq.n	800370e <_realloc_r+0x1e>
 8003732:	42bc      	cmp	r4, r7
 8003734:	4622      	mov	r2, r4
 8003736:	4631      	mov	r1, r6
 8003738:	bf28      	it	cs
 800373a:	463a      	movcs	r2, r7
 800373c:	f7ff fed0 	bl	80034e0 <memcpy>
 8003740:	4631      	mov	r1, r6
 8003742:	4640      	mov	r0, r8
 8003744:	f7ff fef4 	bl	8003530 <_free_r>
 8003748:	e7e1      	b.n	800370e <_realloc_r+0x1e>
 800374a:	4635      	mov	r5, r6
 800374c:	e7df      	b.n	800370e <_realloc_r+0x1e>
	...

08003750 <_sbrk_r>:
 8003750:	b538      	push	{r3, r4, r5, lr}
 8003752:	4d06      	ldr	r5, [pc, #24]	; (800376c <_sbrk_r+0x1c>)
 8003754:	2300      	movs	r3, #0
 8003756:	4604      	mov	r4, r0
 8003758:	4608      	mov	r0, r1
 800375a:	602b      	str	r3, [r5, #0]
 800375c:	f7fd fa9c 	bl	8000c98 <_sbrk>
 8003760:	1c43      	adds	r3, r0, #1
 8003762:	d102      	bne.n	800376a <_sbrk_r+0x1a>
 8003764:	682b      	ldr	r3, [r5, #0]
 8003766:	b103      	cbz	r3, 800376a <_sbrk_r+0x1a>
 8003768:	6023      	str	r3, [r4, #0]
 800376a:	bd38      	pop	{r3, r4, r5, pc}
 800376c:	20000138 	.word	0x20000138

08003770 <__malloc_lock>:
 8003770:	4801      	ldr	r0, [pc, #4]	; (8003778 <__malloc_lock+0x8>)
 8003772:	f000 b811 	b.w	8003798 <__retarget_lock_acquire_recursive>
 8003776:	bf00      	nop
 8003778:	2000013c 	.word	0x2000013c

0800377c <__malloc_unlock>:
 800377c:	4801      	ldr	r0, [pc, #4]	; (8003784 <__malloc_unlock+0x8>)
 800377e:	f000 b80c 	b.w	800379a <__retarget_lock_release_recursive>
 8003782:	bf00      	nop
 8003784:	2000013c 	.word	0x2000013c

08003788 <_malloc_usable_size_r>:
 8003788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800378c:	1f18      	subs	r0, r3, #4
 800378e:	2b00      	cmp	r3, #0
 8003790:	bfbc      	itt	lt
 8003792:	580b      	ldrlt	r3, [r1, r0]
 8003794:	18c0      	addlt	r0, r0, r3
 8003796:	4770      	bx	lr

08003798 <__retarget_lock_acquire_recursive>:
 8003798:	4770      	bx	lr

0800379a <__retarget_lock_release_recursive>:
 800379a:	4770      	bx	lr

0800379c <_init>:
 800379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379e:	bf00      	nop
 80037a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a2:	bc08      	pop	{r3}
 80037a4:	469e      	mov	lr, r3
 80037a6:	4770      	bx	lr

080037a8 <_fini>:
 80037a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037aa:	bf00      	nop
 80037ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ae:	bc08      	pop	{r3}
 80037b0:	469e      	mov	lr, r3
 80037b2:	4770      	bx	lr
